<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on SryAsuka</title>
        <link>https://sryasuka.fun/post/</link>
        <description>Recent content in Posts on SryAsuka</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 09 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://sryasuka.fun/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>EA与ROSE的使用</title>
        <link>https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        <description>&lt;img src="https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/EA.jpg" alt="Featured image of post EA与ROSE的使用" /&gt;&lt;h2 id=&#34;ea的使用enterprise-architect-14&#34;&gt;EA的使用(Enterprise Architect 14)&lt;/h2&gt;
&lt;h3 id=&#34;熟悉界面&#34;&gt;熟悉界面&lt;/h3&gt;
&lt;h4 id=&#34;初始化界面&#34;&gt;初始化界面&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/736f77e9ef31825aa04f5dd123481e1.png&#34;
	width=&#34;1920&#34;
	height=&#34;1027&#34;
	srcset=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/736f77e9ef31825aa04f5dd123481e1_hu1e0fd693748b53e1c67baf4da2ceaacd_132840_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/736f77e9ef31825aa04f5dd123481e1_hu1e0fd693748b53e1c67baf4da2ceaacd_132840_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;186&#34;
		data-flex-basis=&#34;448px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;基本操作--生成文件&#34;&gt;基本操作 — 生成文件&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建 NEW File
&lt;img src=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/c63d55f224d6846728158760549bb63.png&#34;
	width=&#34;756&#34;
	height=&#34;439&#34;
	srcset=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/c63d55f224d6846728158760549bb63_hu4b123d71c943a0967085ebfc09c8a50a_16702_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/c63d55f224d6846728158760549bb63_hu4b123d71c943a0967085ebfc09c8a50a_16702_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;413px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这将会创建一个后缀为eapx的文件（此用demo做测试）
&lt;img src=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/7e28ae3aa372b99bf1870317578d9a9.png&#34;
	width=&#34;309&#34;
	height=&#34;69&#34;
	srcset=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/7e28ae3aa372b99bf1870317578d9a9_hu4657e20b840b174ef1bc41e14dd002c4_8104_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/7e28ae3aa372b99bf1870317578d9a9_hu4657e20b840b174ef1bc41e14dd002c4_8104_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;447&#34;
		data-flex-basis=&#34;1074px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;左侧Project Browser建包-点击上方文件夹图标建包&lt;br&gt;
&lt;img src=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/2f148cdde35a6b8cc4d61e846d8d5e9.png&#34;
	width=&#34;188&#34;
	height=&#34;332&#34;
	srcset=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/2f148cdde35a6b8cc4d61e846d8d5e9_huc8ccaa82a35650b115957f9e36ba0a9d_4787_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/2f148cdde35a6b8cc4d61e846d8d5e9_huc8ccaa82a35650b115957f9e36ba0a9d_4787_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;135px&#34;
	
&gt;
&lt;img src=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/35c22c471966a15682deead04f99d7f.png&#34;
	width=&#34;420&#34;
	height=&#34;312&#34;
	srcset=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/35c22c471966a15682deead04f99d7f_hu0b86fbebca2d8e671a5f39dcce17b1d3_5976_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/35c22c471966a15682deead04f99d7f_hu0b86fbebca2d8e671a5f39dcce17b1d3_5976_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;323px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件夹右侧图标创建模型
&lt;img src=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/7adc3463e254073970053aed3a45bad.png&#34;
	width=&#34;891&#34;
	height=&#34;566&#34;
	srcset=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/7adc3463e254073970053aed3a45bad_hu3eac5663a998978e48b016d0a41af8aa_36016_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/7adc3463e254073970053aed3a45bad_hu3eac5663a998978e48b016d0a41af8aa_36016_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;157&#34;
		data-flex-basis=&#34;377px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;模型图&#34;&gt;模型图&lt;/h4&gt;
&lt;p&gt;UML Structrual(UML结构)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/3028c1c5855f6925d6d257361b64697.png&#34;
	width=&#34;519&#34;
	height=&#34;269&#34;
	srcset=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/3028c1c5855f6925d6d257361b64697_hu2c1cbf6f08205931c982a348ce6295ce_6819_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/3028c1c5855f6925d6d257361b64697_hu2c1cbf6f08205931c982a348ce6295ce_6819_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;463px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;从上至下分别为&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;包&lt;/li&gt;
&lt;li&gt;静态类图&lt;/li&gt;
&lt;li&gt;复合结构&lt;/li&gt;
&lt;li&gt;组件&lt;/li&gt;
&lt;li&gt;部署&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;UML Behaivoral(UML行为)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/c4f2b42d4c55d9a94ea13bd26a35c59.png&#34;
	width=&#34;520&#34;
	height=&#34;266&#34;
	srcset=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/c4f2b42d4c55d9a94ea13bd26a35c59_hu3c26e3fbcba0723e774084a7604b70bb_7995_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/c4f2b42d4c55d9a94ea13bd26a35c59_hu3c26e3fbcba0723e774084a7604b70bb_7995_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;195&#34;
		data-flex-basis=&#34;469px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;从上至下分别为&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用例&lt;/li&gt;
&lt;li&gt;活动图&lt;/li&gt;
&lt;li&gt;状态机&lt;/li&gt;
&lt;li&gt;通信图&lt;/li&gt;
&lt;li&gt;顺序图&lt;/li&gt;
&lt;li&gt;定时&lt;/li&gt;
&lt;li&gt;交互概述&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;uml常见图介绍&#34;&gt;UML常见图介绍&lt;/h4&gt;
&lt;h5 id=&#34;类图&#34;&gt;类图&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/f41f96262d9094bfdbdbd5c24cf4ddd.png&#34;
	width=&#34;1042&#34;
	height=&#34;685&#34;
	srcset=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/f41f96262d9094bfdbdbd5c24cf4ddd_hud166b83051d36a596c51853fe2a10a54_34013_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/f41f96262d9094bfdbdbd5c24cf4ddd_hud166b83051d36a596c51853fe2a10a54_34013_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;152&#34;
		data-flex-basis=&#34;365px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;拖动 Toolbox 的组件于白色界面&lt;/p&gt;
&lt;p&gt;Class&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类表&lt;/li&gt;
&lt;li&gt;接口&lt;/li&gt;
&lt;li&gt;数据表&lt;/li&gt;
&lt;li&gt;列举&lt;/li&gt;
&lt;li&gt;信号&lt;/li&gt;
&lt;li&gt;关联关系&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;连接线&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关联&lt;/li&gt;
&lt;li&gt;泛化&lt;/li&gt;
&lt;li&gt;组合&lt;/li&gt;
&lt;li&gt;聚合&lt;/li&gt;
&lt;li&gt;关联表&lt;/li&gt;
&lt;li&gt;实现&lt;/li&gt;
&lt;li&gt;模板绑定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;PS：&lt;/em&gt; 组合是多个组合成整体，聚合是多个整体聚合&lt;/p&gt;
&lt;p&gt;右侧 Element Properties 修改属性值&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/ef0279fc1210a0bf14b1a719110d0a9.png&#34;
	width=&#34;395&#34;
	height=&#34;809&#34;
	srcset=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/ef0279fc1210a0bf14b1a719110d0a9_hu162da600209170ecc26016f816efe7a9_15025_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/ef0279fc1210a0bf14b1a719110d0a9_hu162da600209170ecc26016f816efe7a9_15025_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;48&#34;
		data-flex-basis=&#34;117px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;下方 Features &amp;amp; Properties 增改数据成员和成员函数&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/ff58cdb5634fd7379feb5299c21e2d9.png&#34;
	width=&#34;1040&#34;
	height=&#34;316&#34;
	srcset=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/ff58cdb5634fd7379feb5299c21e2d9_hu6ed9a5959c6969496b17124a6b53c5eb_8452_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/ff58cdb5634fd7379feb5299c21e2d9_hu6ed9a5959c6969496b17124a6b53c5eb_8452_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;329&#34;
		data-flex-basis=&#34;789px&#34;
	
&gt;&lt;/p&gt;
&lt;h5 id=&#34;活动图&#34;&gt;活动图&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/f615d51bddcb0e0b066da3308b36b91.png&#34;
	width=&#34;193&#34;
	height=&#34;629&#34;
	srcset=&#34;https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/f615d51bddcb0e0b066da3308b36b91_hu753fefb7553a1df4199fe859645a736d_16641_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/ea%E4%B8%8Erose%E7%9A%84%E4%BD%BF%E7%94%A8/f615d51bddcb0e0b066da3308b36b91_hu753fefb7553a1df4199fe859645a736d_16641_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;30&#34;
		data-flex-basis=&#34;73px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Toolbox:&lt;/p&gt;
&lt;p&gt;Activity:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;活动（可以再分的非原子动作）（activity可以包含多个action）&lt;/li&gt;
&lt;li&gt;活动（无法再分的原子动作）&lt;/li&gt;
&lt;li&gt;分区&lt;/li&gt;
&lt;li&gt;发送&lt;/li&gt;
&lt;li&gt;接收&lt;/li&gt;
&lt;li&gt;结构活动&lt;/li&gt;
&lt;li&gt;区域&lt;/li&gt;
&lt;li&gt;例外&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Control Nodes（控制结点）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始节点&lt;/li&gt;
&lt;li&gt;决策&lt;/li&gt;
&lt;li&gt;合并&lt;/li&gt;
&lt;li&gt;同步&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>串、数组和广义表</title>
        <link>https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/</link>
        <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/</guid>
        <description>&lt;img src="https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/SAAGT.png" alt="Featured image of post 串、数组和广义表" /&gt;&lt;h2 id=&#34;串&#34;&gt;串&lt;/h2&gt;
&lt;h3 id=&#34;串的定义&#34;&gt;串的定义&lt;/h3&gt;
&lt;p&gt;串(String)&amp;mdash;-零个或多个字符组成的有限序列&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/fe3f8967a8372b60cc8f93aac31966c.png&#34;
	width=&#34;670&#34;
	height=&#34;337&#34;
	srcset=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/fe3f8967a8372b60cc8f93aac31966c_hu15977babbe31143af00a3c1de44496ad_9708_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/fe3f8967a8372b60cc8f93aac31966c_hu15977babbe31143af00a3c1de44496ad_9708_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;477px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;串的类型定义存储结构及运算&#34;&gt;串的类型定义、存储结构及运算&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/daeab1bb816463a2424d9c84d237892.png&#34;
	width=&#34;698&#34;
	height=&#34;168&#34;
	srcset=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/daeab1bb816463a2424d9c84d237892_hu1eec1911e094b5f8bb986c7159455362_12436_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/daeab1bb816463a2424d9c84d237892_hu1eec1911e094b5f8bb986c7159455362_12436_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;415&#34;
		data-flex-basis=&#34;997px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;基本操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(1)  StrAssign (&amp;amp;T,chars)                //串赋值
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(2) StrCompare (S,T)                      //串比较
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(3) StrLength (S)                             //求串长
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(4) Concat(&amp;amp;T,S1,S2)                     //串联     
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(5) SubString(&amp;amp;Sub,S,pos,len)     //求子串
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(6) StrCopy(&amp;amp;T,S)                       //串拷贝
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(7) StrEmpty(S)                           //串判空
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(8) ClearString (&amp;amp;S)                   //清空串
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(9)  Index(S,T,pos)                     //子串的位置
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(11) Replace(&amp;amp;S,T,V)                //串替换
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(12) StrInsert(&amp;amp;S,pos,T)            //子串插入
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(13) StrDelete(&amp;amp;S,pos,len)        //子串删除
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(14) DestroyString(&amp;amp;S)             //串销毁
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;串的存储结构&#34;&gt;串的存储结构&lt;/h4&gt;
&lt;p&gt;顺序存储：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typedef struct{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; char *ch;      //若串非空,则按串长分配存储区,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                //否则ch为NULL
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; int  length;   //串长度
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}HString;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;链式存储：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/4634f9faa1b9319d3a2471fd395b0e2.png&#34;
	width=&#34;877&#34;
	height=&#34;357&#34;
	srcset=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/4634f9faa1b9319d3a2471fd395b0e2_hu7c70d2b30dd0e7cac1cb4cac0f524f04_11280_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/4634f9faa1b9319d3a2471fd395b0e2_hu7c70d2b30dd0e7cac1cb4cac0f524f04_11280_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;245&#34;
		data-flex-basis=&#34;589px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#define CHUNKSIZE 80       //可由用户定义的块大小
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typedef struct Chunk{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; char  ch[CHUNKSIZE];
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; struct Chunk *next;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}Chunk;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typedef struct{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; Chunk *head,*tail;      //串的头指针和尾指针
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; int curlen;             //串的当前长度
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}LString;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;链式存储的优缺点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优点：操作方便&lt;/li&gt;
&lt;li&gt;缺点：存储密度较低&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;PS: 存储密度 = 串值所占的存储位/实际分配的存储位&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以使用可将多个字符存放在一个结点中，以克服其缺点&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;串的模式匹配算法&#34;&gt;串的模式匹配算法&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;BF算法&lt;/strong&gt; :&lt;/p&gt;
&lt;p&gt;Index(S,T,pos)&lt;/p&gt;
&lt;p&gt;将主串的第pos个字符和模式的第一个字符比较，若相等，继续逐个比较后续字符；
若不等，从主串的下一字符起，重新与模式的第一个字符比较。&lt;/p&gt;
&lt;p&gt;直到主串的一个连续子串字符序列与模式相等 。返回值为S中与T匹配的子序列第一个字符的序号，即匹配成功。&lt;/p&gt;
&lt;p&gt;否则，匹配失败，返回值 0&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/1677312267808.jpg&#34;
	width=&#34;763&#34;
	height=&#34;257&#34;
	srcset=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/1677312267808_hufeca99dc5160045cce64b25d508d9d8d_53531_480x0_resize_q75_box.jpg 480w, https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/1677312267808_hufeca99dc5160045cce64b25d508d9d8d_53531_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;296&#34;
		data-flex-basis=&#34;712px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BF算法时间复杂度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例： S=‘0000000001’，T=‘0001’，pos=1&lt;/p&gt;
&lt;p&gt;若n为主串长度，m为子串长度，最坏情况是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主串前面n-m个位置都部分匹配到子串的最后一位，即这n-m位各比较了m次&lt;/li&gt;
&lt;li&gt;最后m位也各比较了1次&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总次数为：(n-m) * m+m＝(n-m+1) * m&lt;/p&gt;
&lt;p&gt;若m &amp;laquo; n，则算法复杂度O(n*m)&lt;/p&gt;
&lt;h2 id=&#34;数组&#34;&gt;数组&lt;/h2&gt;
&lt;p&gt;本章的数组既可以是顺序的，也可以是链式结构，用户可根据需要选择。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/a3e28b50cdc648321215fbdbebad162.png&#34;
	width=&#34;747&#34;
	height=&#34;566&#34;
	srcset=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/a3e28b50cdc648321215fbdbebad162_hua26d11645460780a290917b590791a12_30206_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/a3e28b50cdc648321215fbdbebad162_hua26d11645460780a290917b590791a12_30206_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;316px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;基本操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```
(1) InitArray (&amp;amp;A,n,bound1, boundn)     //构造数组A
(2) DestroyArray (&amp;amp;A)                     // 销毁数组A
(3) Value(A,&amp;amp;e,index1,…,indexn)   //取数组元素值
(4) Assign (A,&amp;amp;e,index1,…,indexn) //给数组元素赋值
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一维数组&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/4a895fb10cba357af629d841383853b.png&#34;
	width=&#34;750&#34;
	height=&#34;456&#34;
	srcset=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/4a895fb10cba357af629d841383853b_huac6f0241f649ec97482ee483f92ff746_25660_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/4a895fb10cba357af629d841383853b_huac6f0241f649ec97482ee483f92ff746_25660_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;394px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;二维数组&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/f414f7af66b9f11a92bf29d90da79dc.png&#34;
	width=&#34;757&#34;
	height=&#34;563&#34;
	srcset=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/f414f7af66b9f11a92bf29d90da79dc_hu762fdb624e37beb05a7091538caaa0c8_25744_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/f414f7af66b9f11a92bf29d90da79dc_hu762fdb624e37beb05a7091538caaa0c8_25744_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;322px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/4252eabe92e6c6e43a93abddbeb8ace.png&#34;
	width=&#34;701&#34;
	height=&#34;302&#34;
	srcset=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/4252eabe92e6c6e43a93abddbeb8ace_huae3c1398daea288d89d2971c6a247179_18233_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/4252eabe92e6c6e43a93abddbeb8ace_huae3c1398daea288d89d2971c6a247179_18233_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;232&#34;
		data-flex-basis=&#34;557px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;行序优先的表示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/15952b38b5fb77bec9e7da20b4bb7d1.png&#34;
	width=&#34;754&#34;
	height=&#34;566&#34;
	srcset=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/15952b38b5fb77bec9e7da20b4bb7d1_huf3b4cddc0e7526561c6e1569479c7ec9_36380_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/15952b38b5fb77bec9e7da20b4bb7d1_huf3b4cddc0e7526561c6e1569479c7ec9_36380_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/eac7029d1f0f3d07fe1eb41ae62aa76.png&#34;
	width=&#34;725&#34;
	height=&#34;356&#34;
	srcset=&#34;https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/eac7029d1f0f3d07fe1eb41ae62aa76_huca4c846ee7f77f36a2bf3b73dbe06f6b_21659_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E4%B8%B2%E6%95%B0%E7%BB%84%E5%92%8C%E5%B9%BF%E4%B9%89%E8%A1%A8/eac7029d1f0f3d07fe1eb41ae62aa76_huca4c846ee7f77f36a2bf3b73dbe06f6b_21659_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;203&#34;
		data-flex-basis=&#34;488px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;广义表&#34;&gt;广义表&lt;/h2&gt;
&lt;p&gt;广义表（列表）: n (&amp;gt;=0)个表元素组成的有限序列，记作LS = (a0, a1, a2, …, an-1)&lt;/p&gt;
&lt;p&gt;LS是表名，ai是表元素，它可以是表 (称为子表)，可以是数据元素(称为原子)。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PS:n为表的长度。n = 0 的广义表为空表&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;广义表的基本运算&#34;&gt;广义表的基本运算&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;求表头GetHead(L)：非空广义表的第一个元素，可以是一个单元素，也可以是一个子表&lt;/li&gt;
&lt;li&gt;求表尾GetTail(L)：非空广义表除去表头元素以外其它元素所构成的表。表尾一定是一个表&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;练习  A=(a,b,(c,d),(e,(f,g)))&lt;/p&gt;
&lt;p&gt;GetHead(GetTail(GetHead(GetTail(GetTail(A))))) = ?&lt;/p&gt;
&lt;p&gt;解题过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GetTail(A)= (b,(c,d),(e,(f,g))) = S&lt;/li&gt;
&lt;li&gt;GetTail(S)=((c,d),(e,(f,g)))=S1&lt;/li&gt;
&lt;li&gt;GetHead(S1)=(c,d)=S2&lt;/li&gt;
&lt;li&gt;GetTail(S2)=(d)=S3&lt;/li&gt;
&lt;li&gt;GetHead(S3)=d&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;广义表的特点&#34;&gt;广义表的特点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;有次序性: 一个直接前驱和一个直接后继&lt;/li&gt;
&lt;li&gt;有长度 ＝表中元素个数&lt;/li&gt;
&lt;li&gt;有深度 ＝表中括号的重数&lt;/li&gt;
&lt;li&gt;可递归: 自己可以作为自己的子表&lt;/li&gt;
&lt;li&gt;可共享: 可以为其他广义表所共享&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>图</title>
        <link>https://sryasuka.fun/p/%E5%9B%BE/</link>
        <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>https://sryasuka.fun/p/%E5%9B%BE/</guid>
        <description>&lt;img src="https://sryasuka.fun/p/%E5%9B%BE/Pic.png" alt="Featured image of post 图" /&gt;&lt;h2 id=&#34;图的定义和基本术语&#34;&gt;图的定义和基本术语&lt;/h2&gt;
&lt;p&gt;图：Graph=(V,E)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;V：顶点(数据元素)的有穷非空集合；&lt;/li&gt;
&lt;li&gt;E：边的有穷集合。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677320804059.jpg&#34;
	width=&#34;221&#34;
	height=&#34;249&#34;
	srcset=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677320804059_hu0f3bab7181634439615118cd25bc2195_3768_480x0_resize_q75_box.jpg 480w, https://sryasuka.fun/p/%E5%9B%BE/1677320804059_hu0f3bab7181634439615118cd25bc2195_3768_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;88&#34;
		data-flex-basis=&#34;213px&#34;
	
&gt;   &lt;img src=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677320813608.jpg&#34;
	width=&#34;228&#34;
	height=&#34;257&#34;
	srcset=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677320813608_hu9a255b1c3bf7b11bbd6fcc4a415892f2_4740_480x0_resize_q75_box.jpg 480w, https://sryasuka.fun/p/%E5%9B%BE/1677320813608_hu9a255b1c3bf7b11bbd6fcc4a415892f2_4740_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;88&#34;
		data-flex-basis=&#34;212px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有向图： 每条边都是有方向的&lt;/li&gt;
&lt;li&gt;无向图： 每条边都是无方向的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677320963681.jpg&#34;
	width=&#34;264&#34;
	height=&#34;267&#34;
	srcset=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677320963681_huf979c344818959caba0fe1621d939ffb_14886_480x0_resize_q75_box.jpg 480w, https://sryasuka.fun/p/%E5%9B%BE/1677320963681_huf979c344818959caba0fe1621d939ffb_14886_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;237px&#34;
	
&gt;   &lt;img src=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677320973124.jpg&#34;
	width=&#34;292&#34;
	height=&#34;297&#34;
	srcset=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677320973124_huf7d1dbc9d6af03e8f59f283b8180c817_25623_480x0_resize_q75_box.jpg 480w, https://sryasuka.fun/p/%E5%9B%BE/1677320973124_huf7d1dbc9d6af03e8f59f283b8180c817_25623_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;235px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;完全图：任意两个点都有一条边相连&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无向完全图：n(n-1)/2 条边&lt;/li&gt;
&lt;li&gt;有向完全图：n(n-1) 条边&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;稀疏图：有很少边或弧的图。&lt;/p&gt;
&lt;p&gt;稠密图：有较多边或弧的图。&lt;/p&gt;
&lt;p&gt;网：边/弧带权的图。&lt;/p&gt;
&lt;p&gt;邻接：有边/弧相连的两个顶点之间的关系。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存在(vi, vj)，则称vi和vj互为邻接点；&lt;/li&gt;
&lt;li&gt;存在&amp;lt;vi, vj&amp;gt;，则称vi邻接到vj， vj邻接于vi&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关联(依附)：边/弧与顶点之间的关系。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存在(vi, vj)/ &amp;lt;vi, vj&amp;gt;， 则称该边/弧关联于vi和vj&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;顶点的度：与该顶点相关联的边的数目，记为TD(v)&lt;/p&gt;
&lt;p&gt;在有向图中, 顶点的度等于该顶点的入度与出度之和。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;顶点 v 的入度是以 v 为终点的有向边的条数, 记作 ID(v)&lt;/li&gt;
&lt;li&gt;顶点 v 的出度是以 v 为始点的有向边的条数, 记作OD(v)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有向树：仅1个顶点的入度为0,其余顶点的入度均为1&lt;/p&gt;
&lt;p&gt;路径：接续的边构成的顶点序列。&lt;/p&gt;
&lt;p&gt;路径长度：路径上边或弧的数目/权值之和。&lt;/p&gt;
&lt;p&gt;回路(环)：第一个顶点和最后一个顶点相同的路径。&lt;/p&gt;
&lt;p&gt;简单路径：除路径起点和终点可以相同外，其余顶点均不相同的路径。&lt;/p&gt;
&lt;p&gt;简单回路(简单环)：除路径起点和终点相同外，其余顶点均不相同的路径。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677322384188.jpg&#34;
	width=&#34;656&#34;
	height=&#34;228&#34;
	srcset=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677322384188_hu195de8d52eda8eadec2639790107baea_27340_480x0_resize_q75_box.jpg 480w, https://sryasuka.fun/p/%E5%9B%BE/1677322384188_hu195de8d52eda8eadec2639790107baea_27340_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;287&#34;
		data-flex-basis=&#34;690px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;连通图（强连通图）：&lt;/p&gt;
&lt;p&gt;在无（有）向图G=( V, {E} )中，若对任何两个顶点 v、u 都存在从v 到 u 的路径，则称G是连通图（强连通图）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677322669217.png&#34;
	width=&#34;680&#34;
	height=&#34;337&#34;
	srcset=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677322669217_hu7e5612c7716e33cb622d1ed51f3e73a2_32228_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E5%9B%BE/1677322669217_hu7e5612c7716e33cb622d1ed51f3e73a2_32228_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;201&#34;
		data-flex-basis=&#34;484px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;图的类型定义&#34;&gt;图的类型定义&lt;/h2&gt;
&lt;p&gt;CreateGraph(&amp;amp;G,V,VR)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始条件：V是图的顶点集，VR是图中弧的集合。&lt;/li&gt;
&lt;li&gt;操作结果：按V和VR的定义构造图G。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;DFSTraverse(G)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始条件：图G存在。&lt;/li&gt;
&lt;li&gt;操作结果：对图进行深度优先遍历。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;BFSTraverse(G)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始条件：图G存在。&lt;/li&gt;
&lt;li&gt;操作结果：对图进行广度优先遍历。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;邻接矩阵&#34;&gt;邻接矩阵&lt;/h3&gt;
&lt;p&gt;邻接矩阵：建立一个顶点表（记录各个顶点信息）和一个邻接矩阵（表示各个顶点之间关系）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677323005614.png&#34;
	width=&#34;761&#34;
	height=&#34;567&#34;
	srcset=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677323005614_hu9c004404cd879e64504a822e6ac2772c_49964_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E5%9B%BE/1677323005614_hu9c004404cd879e64504a822e6ac2772c_49964_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;322px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677323093843.png&#34;
	width=&#34;760&#34;
	height=&#34;571&#34;
	srcset=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677323093843_hu380cdea7289da6597b17cceabfd94a16_69799_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E5%9B%BE/1677323093843_hu380cdea7289da6597b17cceabfd94a16_69799_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677323160750.png&#34;
	width=&#34;763&#34;
	height=&#34;393&#34;
	srcset=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677323160750_hu259cdd74dbd982670ff9bfa04291aaf5_41294_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E5%9B%BE/1677323160750_hu259cdd74dbd982670ff9bfa04291aaf5_41294_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;465px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;邻接矩阵的特点&#34;&gt;邻接矩阵的特点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;优点：容易实现图的操作，如：求某顶点的度、判断顶点之间是否有边、找顶点的邻接点等等。&lt;/li&gt;
&lt;li&gt;缺点：n个顶点需要n*n个单元存储边;空间效率为O(n2)。 对稀疏图而言尤其浪费空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;邻接矩阵的储存表示&#34;&gt;邻接矩阵的储存表示&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#define MaxInt 32767                    	//表示极大值，即∞
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#define MVNum 100                       	//最大顶点数 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typedef char VerTexType;              	//假设顶点的数据类型为字符型 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typedef int ArcType;                  	//假设边的权值类型为整型 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typedef struct{ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;VerTexType vexs[MVNum];            		//顶点表 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ArcType arcs[MVNum][MVNum];      		//邻接矩阵 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int vexnum,arcnum;                		//图的当前点数和边数 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}AMGraph; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;采用邻接矩阵表示法创建无向网&#34;&gt;采用邻接矩阵表示法创建无向网&lt;/h4&gt;
&lt;p&gt;算法思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入总顶点数和总边数。&lt;/li&gt;
&lt;li&gt;依次输入点的信息存入顶点表中。&lt;/li&gt;
&lt;li&gt;初始化邻接矩阵，使每个权值初始化为极大值。&lt;/li&gt;
&lt;li&gt;构造邻接矩阵。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status CreateUDN(AMGraph &amp;amp;G){ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //采用邻接矩阵表示法，创建无向网G 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    cin&amp;gt;&amp;gt;G.vexnum&amp;gt;&amp;gt;G.arcnum; 	//输入总顶点数，总边数 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    for(i = 0; i&amp;lt;G.vexnum; ++i)    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      cin&amp;gt;&amp;gt;G.vexs[i];                        	//依次输入点的信息 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    for(i = 0; i&amp;lt;G.vexnum;++i) 	//初始化邻接矩阵，边的权值均置为极大值
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       for(j = 0; j&amp;lt;G.vexnum;++j)   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         G.arcs[i][j] = MaxInt;   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    for(k = 0; k&amp;lt;G.arcnum;++k){                     //构造邻接矩阵 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      cin&amp;gt;&amp;gt;v1&amp;gt;&amp;gt;v2&amp;gt;&amp;gt;w;                                 //输入一条边依附的顶点及权值 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      i = LocateVex(G, v1);  j = LocateVex(G, v2);  //确定v1和v2在G中的位置
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      G.arcs[i][j] = w; //边&amp;lt;v1, v2&amp;gt;的权值置为w 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      G.arcs[j][i] = G.arcs[i][j];              //置&amp;lt;v1, v2&amp;gt;的对称边&amp;lt;v2, v1&amp;gt;的权值为w 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   }//for 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   return OK; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}//CreateUDN 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; int LocateVex(MGraph G,VertexType u)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; {//存在则返回u在顶点表中的下标;否则返回-1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   int i;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   for(i=0;i&amp;lt;G.vexnum;++i)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     if(u==G.vexs[i])
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       return i;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   return -1;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;邻接表&#34;&gt;邻接表&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677323643681.png&#34;
	width=&#34;762&#34;
	height=&#34;572&#34;
	srcset=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677323643681_huc30296167c860954eda46b861eca334d_81392_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E5%9B%BE/1677323643681_huc30296167c860954eda46b861eca334d_81392_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677323688187.png&#34;
	width=&#34;763&#34;
	height=&#34;569&#34;
	srcset=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677323688187_hu1a3e68663a7ad54ab3dab8ee6b04fc54_54174_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E5%9B%BE/1677323688187_hu1a3e68663a7ad54ab3dab8ee6b04fc54_54174_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;321px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677323724554.png&#34;
	width=&#34;762&#34;
	height=&#34;528&#34;
	srcset=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677323724554_hu11ba1c579de66562abd5f4591837626e_51259_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E5%9B%BE/1677323724554_hu11ba1c579de66562abd5f4591837626e_51259_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;144&#34;
		data-flex-basis=&#34;346px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;邻接表的特点&#34;&gt;邻接表的特点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;优点：空间效率高，容易寻找顶点的邻接点；&lt;/li&gt;
&lt;li&gt;缺点：判断两顶点间是否有边或弧，需搜索两结点对应的单链表，没有邻接矩阵方便。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;邻接表的储存表示&#34;&gt;邻接表的储存表示&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#define MVNum 100                        	//最大顶点数 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typedef struct ArcNode{                		//边结点 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    int adjvex;                          		//该边所指向的顶点的位置 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    struct ArcNode * nextarc;          	//指向下一条边的指针 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    OtherInfo info;                      	              //和边相关的信息 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}ArcNode; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typedef struct VNode{ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    VerTexType data;                    	//顶点信息 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ArcNode * firstarc;                	//指向第一条依附该顶点的边的指针 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}VNode, AdjList[MVNum];               	//AdjList表示邻接表类型 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typedef struct{ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    AdjList vertices;                 		//邻接表 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    int vexnum, arcnum;              		//图的当前顶点数和边数 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}ALGraph; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;采用邻接表表示法创建无向网&#34;&gt;采用邻接表表示法创建无向网&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;输入总顶点数和总边数。&lt;/li&gt;
&lt;li&gt;依次输入点的信息存入顶点表中，使每个表头结点的指针域初始化为NULL。&lt;/li&gt;
&lt;li&gt;创建邻接表。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status CreateUDG(ALGraph &amp;amp;G){ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;　　//采用邻接表表示法，创建无向图G 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;　  cin&amp;gt;&amp;gt;G.vexnum&amp;gt;&amp;gt;G.arcnum;               	//输入总顶点数，总边数 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    for(i = 0; i&amp;lt;G.vexnum; ++i){          	//输入各点，构造表头结点表 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       cin&amp;gt;&amp;gt; G.vertices[i].data;           	//输入顶点值 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       G.vertices[i].firstarc=NULL;       	//初始化表头结点的指针域为NULL 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }//for 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    for(k = 0; k&amp;lt;G.arcnum;++k){        		//输入各边，构造邻接表 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       cin&amp;gt;&amp;gt;v1&amp;gt;&amp;gt;v2;                 			//输入一条边依附的两个顶点 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       i = LocateVex(G, v1);  j = LocateVex(G, v2);    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       p1=new ArcNode;               			//生成一个新的边结点*p1 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;　　  p1-&amp;gt;adjvex=j;                   			//邻接点序号为j 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;　  　p1-&amp;gt;nextarc= G.vertices[i].firstarc;  G.vertices[i].firstarc=p1;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      //将新结点*p1插入顶点vi的边表头部 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      p2=new ArcNode; //生成另一个对称的新的边结点*p2 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;　　  p2-&amp;gt;adjvex=i;                   			//邻接点序号为i 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;　  　p2-&amp;gt;nextarc= G.vertices[j].firstarc;  G.vertices[j].firstarc=p2;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      //将新结点*p2插入顶点vj的边表头部 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }//for 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return OK; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}//CreateUDG 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;图的遍历&#34;&gt;图的遍历&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677324115842.png&#34;
	width=&#34;764&#34;
	height=&#34;570&#34;
	srcset=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677324115842_huec6e7eb849eef08ac621abc1cf106517_197946_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E5%9B%BE/1677324115842_huec6e7eb849eef08ac621abc1cf106517_197946_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;321px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677324138907.png&#34;
	width=&#34;776&#34;
	height=&#34;589&#34;
	srcset=&#34;https://sryasuka.fun/p/%E5%9B%BE/1677324138907_hu121290c17ab91438314baf8547b4eecc_370565_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E5%9B%BE/1677324138907_hu121290c17ab91438314baf8547b4eecc_370565_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;316px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;深度优先的DFS算法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void DFS(ALGraph G, int v){        		//图G为邻接表类型 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  cout&amp;lt;&amp;lt;v;  visited[v] = true;    		//访问第v个顶点
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  p= G.vertices[v].firstarc;     //p指向v的边链表的第一个边结点 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;while(p!=NULL){              	//边结点非空 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  w=p-&amp;gt;adjvex;               	//表示w是v的邻接点 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  if(!visited[w])  DFS(G, w); 	//如果w未访问，则递归调用DFS 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  p=p-&amp;gt;nextarc;                	//p指向下一个边结点 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; } 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;广度优先的BFS算法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void BFS (Graph G, int v){ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //按广度优先非递归遍历连通图G 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    cout&amp;lt;&amp;lt;v; visited[v] = true;     		//访问第v个顶点
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    InitQueue(Q);              			//辅助队列Q初始化，置空         
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    EnQueue(Q, v);            			//v进队 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    while(!QueueEmpty(Q)){   		//队列非空 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       DeQueue(Q, u);        			//队头元素出队并置为u 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       for(w = FirstAdjVex(G, u); w&amp;gt;=0; w = NextAdjVex(G, u, w)) 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       if(!visited[w]){               	//w为u的尚未访问的邻接顶点 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             cout&amp;lt;&amp;lt;w; visited[w] = true;	EnQueue(Q, w); //w进队 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          }//if 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }//while 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}//BFS 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;最小生成树&#34;&gt;最小生成树&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  void ShortestPath_DIJ(AMGraph G, int v0){ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    //用Dijkstra算法求有向网G的v0顶点到其余顶点的最短路径 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    n=G.vexnum;                    		//n为G中顶点的个数 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    for(v = 0; v&amp;lt;n; ++v){             	//n个顶点依次初始化 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       S[v] = false;                  	//S初始为空集 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       D[v] = G.arcs[v0][v];           	//将v0到各个终点的最短路径长度初始化 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       if(D[v]&amp;lt; MaxInt)  Path [v]=v0; //v0和v之间有弧，将v的前驱置为v0 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       else Path [v]=-1;               	//如果v0和v之间无弧，则将v的前驱置为-1 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      }//for 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      S[v0]=true;                    	//将v0加入S 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      D[v0]=0;                      		//源点到源点的距离为0 	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      /*―开始主循环，每次求得v0到某个顶点v的最短路径，将v加到S集―*/ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      for(i=1;i&amp;lt;n; ++i){               	//对其余n−1个顶点，依次进行计算 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        min= MaxInt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        for(w=0;w&amp;lt;n; ++w) 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          if(!S[w]&amp;amp;&amp;amp;D[w]&amp;lt;min)  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              {v=w; min=D[w];}         	//选择一条当前的最短路径，终点为v 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        S[v]=true;                   		//将v加入S 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        for(w=0;w&amp;lt;n; ++w) 	//更新从v0出发到集合V−S上所有顶点的最短路径长度 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        if(!S[w]&amp;amp;&amp;amp;(D[v]+G.arcs[v][w]&amp;lt;D[w])){ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             D[w]=D[v]+G.arcs[v][w];   	//更新D[w] 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             Path [w]=v;              		//更改w的前驱为v 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }//if 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }//for       
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}//ShortestPath_DIJ 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>查找</title>
        <link>https://sryasuka.fun/p/%E6%9F%A5%E6%89%BE/</link>
        <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>https://sryasuka.fun/p/%E6%9F%A5%E6%89%BE/</guid>
        <description>&lt;img src="https://sryasuka.fun/p/%E6%9F%A5%E6%89%BE/Find.png" alt="Featured image of post 查找" /&gt;&lt;h2 id=&#34;查找基本概念&#34;&gt;查找基本概念&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;查找表:
由同一类型的数据元素（或记录）构成的集合&lt;/li&gt;
&lt;li&gt;静态查找表：
查找的同时对查找表不做修改操作（如插入和删除）&lt;/li&gt;
&lt;li&gt;动态查找表：
查找的同时对查找表具有修改操作&lt;/li&gt;
&lt;li&gt;关键字
记录中某个数据项的值，可用来识别一个记录&lt;/li&gt;
&lt;li&gt;主关键字：
唯一标识数据元素&lt;/li&gt;
&lt;li&gt;次关键字：
可以标识若干个数据元素&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;线性表查找&#34;&gt;线性表查找&lt;/h2&gt;
&lt;h3 id=&#34;顺序查找&#34;&gt;顺序查找&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int LocateELem(SqList L,ElemType e)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{  for (i=0;i&amp;lt; L.length;i++)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      if (L.elem[i]==e) return i+1;                
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  return 0;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;改进&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int Search_Seq( SSTable  ST , KeyType  key ){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   //若成功返回其位置信息，否则返回0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ST.R[0].key =key;   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; for( i=ST.length; ST.R[ i ].key!=key;  - - i  );
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; //不用for(i=n; i&amp;gt;0; - -i) 或 for(i=1; i&amp;lt;=n; i++)  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   return i; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;时间复杂度: O(n)  (n+1)/2&lt;/p&gt;
&lt;h3 id=&#34;折半查找&#34;&gt;折半查找&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int Search_Bin(SSTable ST,KeyType key){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//若找到，则函数值为该元素在表中的位置，否则为0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    low=1;high=ST.length;						 while(low&amp;lt;=high){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        mid=(low+high)/2;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        if(key==ST.R[mid].key) return mid; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        else if(key&amp;lt;ST.R[mid].key) high=mid-1;//前一子表查找
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        else low=mid+1;                       		//后一子表查找
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }									    return 0;		//表中不存在待查元素
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;时间复杂度 O(log2 n)&lt;/p&gt;
&lt;p&gt;不适合用链表适合用顺序表&lt;/p&gt;
&lt;h3 id=&#34;分块查找&#34;&gt;分块查找&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E6%9F%A5%E6%89%BE/1677326497415.jpg&#34;
	width=&#34;708&#34;
	height=&#34;90&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%9F%A5%E6%89%BE/1677326497415_hub18eb5fd47e148182ad7ea90a4a95a6e_4289_480x0_resize_q75_box.jpg 480w, https://sryasuka.fun/p/%E6%9F%A5%E6%89%BE/1677326497415_hub18eb5fd47e148182ad7ea90a4a95a6e_4289_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;786&#34;
		data-flex-basis=&#34;1888px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;效率比顺序快比折半慢&lt;/p&gt;
&lt;h2 id=&#34;树查找&#34;&gt;树查找&lt;/h2&gt;
&lt;h3 id=&#34;二叉排序树&#34;&gt;二叉排序树&lt;/h3&gt;
&lt;p&gt;二叉排序树或是空树，或是满足如下性质的二叉树：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若其左子树非空，则左子树上所有结点的值均小于根结点的值；&lt;/li&gt;
&lt;li&gt;若其右子树非空，则右子树上所有结点的值均大于等于根结点的值；&lt;/li&gt;
&lt;li&gt;其左右子树本身又各是一棵二叉排序树&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E6%9F%A5%E6%89%BE/1677326802960.jpg&#34;
	width=&#34;464&#34;
	height=&#34;343&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%9F%A5%E6%89%BE/1677326802960_hu1ba8ad765fbdfad758f6c3384dce0383_37610_480x0_resize_q75_box.jpg 480w, https://sryasuka.fun/p/%E6%9F%A5%E6%89%BE/1677326802960_hu1ba8ad765fbdfad758f6c3384dce0383_37610_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;324px&#34;
	
&gt;    &lt;img src=&#34;https://sryasuka.fun/p/%E6%9F%A5%E6%89%BE/1677326764761.jpg&#34;
	width=&#34;496&#34;
	height=&#34;342&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%9F%A5%E6%89%BE/1677326764761_hud05125093166811e0ba17be8e23e3237_30559_480x0_resize_q75_box.jpg 480w, https://sryasuka.fun/p/%E6%9F%A5%E6%89%BE/1677326764761_hud05125093166811e0ba17be8e23e3237_30559_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;145&#34;
		data-flex-basis=&#34;348px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;右图 左分树 6 在 4 下 不是二叉排序树&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;BSTree SearchBST(BSTree T,KeyType key) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   if((!T) || key==T-&amp;gt;data.key) return T;       	 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   else if (key&amp;lt;T-&amp;gt;data.key)  return SearchBST(T-&amp;gt;lchild,key);	//在左子树中继续查找
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   else return SearchBST(T-&amp;gt;rchild,key);    		   		//在右子树中继续查找
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;} // SearchBST
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux 05.06.13</title>
        <link>https://sryasuka.fun/p/linux-05.06.13/</link>
        <pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>https://sryasuka.fun/p/linux-05.06.13/</guid>
        <description>&lt;img src="https://sryasuka.fun/p/linux-05.06.13/Linux_ch05.png" alt="Featured image of post Linux 05.06.13" /&gt;&lt;h1 id=&#34;ch05&#34;&gt;ch05&lt;/h1&gt;
&lt;h2 id=&#34;main和初启函数&#34;&gt;main和初启函数&lt;/h2&gt;
&lt;p&gt;一个进程的代码由用户代码和内核代码组成，进程的用户代码是从main函数才开始执行的。许多程序运行时，往往需要提供一些信息作为main函数的参数来运行，其典型代表是各个命令行程序。编写带参数的程序时，需要使用带参数的main函数，其原型如下:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int main(int argc,char **argv)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int main(int argc, char *argv[])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;进程的真正启动点是系统提供的一个初启函数，该函数位于名为crt0.o的文件中。当编译C程序时，链接器ld会将此文件与C程序文件装配在一起形成可执行文件，并指定该初启函数为程序的开始执行地址。&lt;/p&gt;
&lt;h2 id=&#34;getopt中的模板&#34;&gt;getopt中的“模板”&lt;/h2&gt;
&lt;p&gt;如果程序中的命令行参数遵守前面列出的语法规定，则可以用函数getopt()来读取其中的选项。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#include &amp;lt;unistd.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int getopt(int argc, char * const argv[], const char *optstring);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;extern char *optarg;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;extern int optind, opterr, optopt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;getopt()从argc和argv所指定的参数表中获取下一选项。&lt;/p&gt;
&lt;p&gt;参数optstring是一字符串，它给出对该程序而言合法的选项字符。在此字符串中的选项字符可以跟有冒号“:”指出它要求带有值。例如，字符串“if:ls”表示允许选项-i、-f、-l和-s，且-f要求跟有一个值。&lt;/p&gt;
&lt;h1 id=&#34;ch06&#34;&gt;ch06&lt;/h1&gt;
&lt;h2 id=&#34;进程抽象&#34;&gt;进程抽象&lt;/h2&gt;
&lt;p&gt;进程：&lt;/p&gt;
&lt;p&gt;程序是指令和数据的集合。可执行程序是文本形式程序的机器版本，是指令和数据的二进制处理机表示。&lt;/p&gt;
&lt;p&gt;运行一个程序就得到一个进程。哪怕两个用户同时通过网络登录运行同一计算机上的同一个程序bash，他们也创建的是不同的进程。尽管这两个进程会共享程序的代码和数据，但它们的运行有自己独立的流程，各自分配的系统资源也是不一样的，因此是不同的进程&lt;/p&gt;
&lt;p&gt;进程是计算机科学中最深刻最成功的概念之一。&lt;/p&gt;
&lt;p&gt;在编程中，进程提供给应用程序2个关键抽象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个独立的逻辑控制流，它提供一个假象，使程序觉得在独占地使用处理器。(分时调度技术，上下文切换)&lt;/li&gt;
&lt;li&gt;一个私有的地址空间，它提供一个假象，使程序觉得在独占地使用存储器系统。(虚拟存储器，上下文切换)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;进程并发&#34;&gt;进程并发&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux-05.06.13/33bd911411ebe93ba6c4dad91fbadd5.png&#34;
	width=&#34;1040&#34;
	height=&#34;732&#34;
	srcset=&#34;https://sryasuka.fun/p/linux-05.06.13/33bd911411ebe93ba6c4dad91fbadd5_hubb00403385202e0e3a63a8dd14912e54_276013_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux-05.06.13/33bd911411ebe93ba6c4dad91fbadd5_hubb00403385202e0e3a63a8dd14912e54_276013_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;上下文&#34;&gt;上下文&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux-05.06.13/c9cd2523b278f000d622454b400f62d.png&#34;
	width=&#34;1040&#34;
	height=&#34;737&#34;
	srcset=&#34;https://sryasuka.fun/p/linux-05.06.13/c9cd2523b278f000d622454b400f62d_hub408ffb7dff27c4987af14e393b365fd_279408_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux-05.06.13/c9cd2523b278f000d622454b400f62d_hub408ffb7dff27c4987af14e393b365fd_279408_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;338px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;linux进程的状态&#34;&gt;Linux进程的状态&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux-05.06.13/0a45e111166babc1a5e59800a1ec8c0.png&#34;
	width=&#34;1041&#34;
	height=&#34;735&#34;
	srcset=&#34;https://sryasuka.fun/p/linux-05.06.13/0a45e111166babc1a5e59800a1ec8c0_hu4dd7734289a1f3fe1d2aae86afdcd020_201536_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux-05.06.13/0a45e111166babc1a5e59800a1ec8c0_hu4dd7734289a1f3fe1d2aae86afdcd020_201536_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;339px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;pid与pcb&#34;&gt;PID与PCB&lt;/h2&gt;
&lt;p&gt;每个进程都有一个按顺序分配的整型编号，称为进程标识符或PID，内核代码通过PID来标识不同的进程，同时PID也是内核提供给用户程序的接口，用户程序可以通过PID来操纵进程.&lt;/p&gt;
&lt;p&gt;在32bit的平台中，PID是int类型，但为了与传统硬件平台(16位)兼容，允许的最大编号为32767。当创建第32768号进程时，必须重新从300开始使用已闲置的进程号。&lt;/p&gt;
&lt;p&gt;除了第一个进程(进程0，也叫init_task进程)是用“手工”创建之外，其余的都是已有进程使用fork系统调用创建的新进程。init_task进程创建了PID为1的init进程，它是后续所有进程的祖先。&lt;/p&gt;
&lt;h2 id=&#34;exce函数&#34;&gt;exce函数&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux-05.06.13/exce.png&#34;
	width=&#34;1038&#34;
	height=&#34;2711&#34;
	srcset=&#34;https://sryasuka.fun/p/linux-05.06.13/exce_hu4a6a2993d66d90cef61f0c48c1ae9bd5_912686_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux-05.06.13/exce_hu4a6a2993d66d90cef61f0c48c1ae9bd5_912686_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;38&#34;
		data-flex-basis=&#34;91px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;fork函数&#34;&gt;fork函数&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux-05.06.13/fork.png&#34;
	width=&#34;1041&#34;
	height=&#34;2238&#34;
	srcset=&#34;https://sryasuka.fun/p/linux-05.06.13/fork_hu9093f0e26d179a2eb89c6dfc6181755c_842624_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux-05.06.13/fork_hu9093f0e26d179a2eb89c6dfc6181755c_842624_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;111px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;5种进程终止&#34;&gt;5种进程终止&lt;/h2&gt;
&lt;p&gt;对于进程，有5种方式使其终止：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;正常终止：从main返回、调用exit、调用_exit。&lt;/li&gt;
&lt;li&gt;异常终止：调用abort、由一个信号终止。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过main函数返回而终止进程是常用的方法。当main函数返回后，由初启函数crt0.o调用exit函数终止进程。如果用C来写该初启过程，则它将按如下方式调用main：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;exit(main(argc, argv));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;程序中也常常会用到exit，但较少用到_exit。事实上，这两个函数均终止进程，不同的是_exit直接进入到内核；而exit则会先执行一些清理工作，然后调用_exit进入到内核，因此不推荐应用程序直接调用_exit。&lt;/p&gt;
&lt;h2 id=&#34;wait&#34;&gt;wait&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux-05.06.13/wait.png&#34;
	width=&#34;1035&#34;
	height=&#34;1414&#34;
	srcset=&#34;https://sryasuka.fun/p/linux-05.06.13/wait_hu67826342428836184bd947fa0f2e7e53_417762_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux-05.06.13/wait_hu67826342428836184bd947fa0f2e7e53_417762_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;73&#34;
		data-flex-basis=&#34;175px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;孤儿进程与僵尸进程&#34;&gt;孤儿进程与僵尸进程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux-05.06.13/20230222225433.png&#34;
	width=&#34;1037&#34;
	height=&#34;2241&#34;
	srcset=&#34;https://sryasuka.fun/p/linux-05.06.13/20230222225433_hub76034cc747309393af2e8309136ec0a_690140_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux-05.06.13/20230222225433_hub76034cc747309393af2e8309136ec0a_690140_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;111px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;管道&#34;&gt;管道&lt;/h1&gt;
&lt;h2 id=&#34;管道概述&#34;&gt;管道概述&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux-05.06.13/81a141850821533fe4cbc98de06ff2d.png&#34;
	width=&#34;1040&#34;
	height=&#34;725&#34;
	srcset=&#34;https://sryasuka.fun/p/linux-05.06.13/81a141850821533fe4cbc98de06ff2d_huffebc895d21505e4801a01727772da7b_233943_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux-05.06.13/81a141850821533fe4cbc98de06ff2d_huffebc895d21505e4801a01727772da7b_233943_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;143&#34;
		data-flex-basis=&#34;344px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;pipe&#34;&gt;pipe&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux-05.06.13/e91f22422287bf0e38f7a1bc6894a49.png&#34;
	width=&#34;1042&#34;
	height=&#34;725&#34;
	srcset=&#34;https://sryasuka.fun/p/linux-05.06.13/e91f22422287bf0e38f7a1bc6894a49_huf387ef04aa939a0d9a0636094376689d_260912_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux-05.06.13/e91f22422287bf0e38f7a1bc6894a49_huf387ef04aa939a0d9a0636094376689d_260912_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;143&#34;
		data-flex-basis=&#34;344px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;pipe常见方法&#34;&gt;pipe常见方法&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux-05.06.13/pipe-command.png&#34;
	width=&#34;1040&#34;
	height=&#34;2265&#34;
	srcset=&#34;https://sryasuka.fun/p/linux-05.06.13/pipe-command_hu04dd6f640146260693b1bf28c7219617_694820_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux-05.06.13/pipe-command_hu04dd6f640146260693b1bf28c7219617_694820_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;45&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;命名管道&#34;&gt;命名管道&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux-05.06.13/84159c84ecff64e88c849b42e60ad88.png&#34;
	width=&#34;1039&#34;
	height=&#34;666&#34;
	srcset=&#34;https://sryasuka.fun/p/linux-05.06.13/84159c84ecff64e88c849b42e60ad88_huc35e13dedcc9d4b251cf162e6d106bc1_302741_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux-05.06.13/84159c84ecff64e88c849b42e60ad88_huc35e13dedcc9d4b251cf162e6d106bc1_302741_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;374px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>文件操作</title>
        <link>https://sryasuka.fun/p/linux_ch04/</link>
        <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>https://sryasuka.fun/p/linux_ch04/</guid>
        <description>&lt;img src="https://sryasuka.fun/p/linux_ch04/Linux_ch04.png" alt="Featured image of post 文件操作" /&gt;&lt;h2 id=&#34;文件结构&#34;&gt;文件结构&lt;/h2&gt;
&lt;p&gt;在Linux文件系统中，每一个存放在磁盘上的文件由两部分组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据块－实际存放文件数据的磁盘块&lt;/li&gt;
&lt;li&gt;i-node－描述文件属性的数据结构，常称为索引节点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;i-node: 一个固定长度的数据结构，含有关于文件的大部分属性信息，如文件数据块的索引分配表(后面阐述)、权限、文件类型、大小、访问日期等等。&lt;/p&gt;
&lt;p&gt;每一个i-node有其自己的数值标识，称为i-node number(索引节点号)，一个文件只能通过其inode节点进行访问。&lt;/p&gt;
&lt;p&gt;为了便于用户使用，通常还会对一个文件进行命名，文件名实际上是文件的用户接口。&lt;/p&gt;
&lt;h2 id=&#34;linux中七种文件类型&#34;&gt;Linux中七种文件类型&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;普通文件 (Regular file)：存储文本、图像、音频或二进制数据等常规文件的文件类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目录 (Directory)：存储其他文件和目录的文件类型，可以包含其他目录和子目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;符号链接 (Symbolic link)：类似于Windows中的快捷方式，是指向另一个文件或目录的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;套接字 (Socket)：用于进程间通信的特殊文件类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;块设备文件 (Block device file)：提供对块设备（如硬盘、USB设备等）的访问的文件类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符设备文件 (Character device file)：提供对字符设备（如串行端口、打印机等）的访问的文件类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管道 (Named pipe)：用于进程间通信的一种文件类型，可以在不同的进程之间传输数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;chmod&#34;&gt;chmod&lt;/h2&gt;
&lt;p&gt;chmod 一条命令，用于更改文件或目录的权限。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;chmod&amp;quot;代表&amp;quot;change mode&amp;rdquo;。使用chmod命令可以更改用户（所有者）、群组和其他用户的文件或目录权限。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux_ch04/d4f6c55b0da8679dfb5d4fa77c9e785.png&#34;
	width=&#34;1035&#34;
	height=&#34;734&#34;
	srcset=&#34;https://sryasuka.fun/p/linux_ch04/d4f6c55b0da8679dfb5d4fa77c9e785_hu0c4a44fbddc2d753e4c956736533d618_224231_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux_ch04/d4f6c55b0da8679dfb5d4fa77c9e785_hu0c4a44fbddc2d753e4c956736533d618_224231_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;338px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux_ch04/8314c93d36ad30e29c71175d69a5ca7.png&#34;
	width=&#34;1039&#34;
	height=&#34;739&#34;
	srcset=&#34;https://sryasuka.fun/p/linux_ch04/8314c93d36ad30e29c71175d69a5ca7_hu92fea37a1b89da7de6a5cfb94e9fba9c_217277_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux_ch04/8314c93d36ad30e29c71175d69a5ca7_hu92fea37a1b89da7de6a5cfb94e9fba9c_217277_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;337px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux_ch04/710cc8b4c8719628f3924f1d67c45c3.png&#34;
	width=&#34;1044&#34;
	height=&#34;730&#34;
	srcset=&#34;https://sryasuka.fun/p/linux_ch04/710cc8b4c8719628f3924f1d67c45c3_hu8655de331690356e23908c697d58c668_274148_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux_ch04/710cc8b4c8719628f3924f1d67c45c3_hu8655de331690356e23908c697d58c668_274148_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;143&#34;
		data-flex-basis=&#34;343px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;硬链接和软链接&#34;&gt;硬链接和软链接&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux_ch04/aee4ea24557abdd04316217d03a05ba.png&#34;
	width=&#34;1035&#34;
	height=&#34;735&#34;
	srcset=&#34;https://sryasuka.fun/p/linux_ch04/aee4ea24557abdd04316217d03a05ba_hu54fcede3cb0efebb6ccf8c1b2a924543_325969_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux_ch04/aee4ea24557abdd04316217d03a05ba_hu54fcede3cb0efebb6ccf8c1b2a924543_325969_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;337px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux_ch04/f2ec9c2409c7b5569a3e26432fd6401.png&#34;
	width=&#34;1041&#34;
	height=&#34;718&#34;
	srcset=&#34;https://sryasuka.fun/p/linux_ch04/f2ec9c2409c7b5569a3e26432fd6401_hu0d95f180c63a161faa6a306babbeaceb_181416_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux_ch04/f2ec9c2409c7b5569a3e26432fd6401_hu0d95f180c63a161faa6a306babbeaceb_181416_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;144&#34;
		data-flex-basis=&#34;347px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux_ch04/ef2b229c87325b2caeeeae1486feb6c.png&#34;
	width=&#34;1036&#34;
	height=&#34;733&#34;
	srcset=&#34;https://sryasuka.fun/p/linux_ch04/ef2b229c87325b2caeeeae1486feb6c_hu2d0b302a41bbe2f477325707b4c554a7_266577_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux_ch04/ef2b229c87325b2caeeeae1486feb6c_hu2d0b302a41bbe2f477325707b4c554a7_266577_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;339px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux_ch04/a409931f7b14b2c9f2504a4ec12ecf9.png&#34;
	width=&#34;1036&#34;
	height=&#34;736&#34;
	srcset=&#34;https://sryasuka.fun/p/linux_ch04/a409931f7b14b2c9f2504a4ec12ecf9_hu2ac5d979dba076ea3684798fdc1742dc_369910_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux_ch04/a409931f7b14b2c9f2504a4ec12ecf9_hu2ac5d979dba076ea3684798fdc1742dc_369910_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;337px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;12个文件访问权限&#34;&gt;12个文件访问权限&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux_ch04/37af34008c36925a2d4c047d9ec5473.png&#34;
	width=&#34;1038&#34;
	height=&#34;728&#34;
	srcset=&#34;https://sryasuka.fun/p/linux_ch04/37af34008c36925a2d4c047d9ec5473_hu22a3539b109040d2becabff9ed8ec48c_251639_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux_ch04/37af34008c36925a2d4c047d9ec5473_hu22a3539b109040d2becabff9ed8ec48c_251639_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;342px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;文件所有者的权限 (User permissions)：通常表示为文件权限字符串中的前三个字符。这个权限定义了文件所有者的权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件所在组的权限 (Group permissions)：通常表示为文件权限字符串中的第四到第六个字符。这个权限定义了文件所在组的用户的权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他用户的权限 (Other permissions)：通常表示为文件权限字符串中的第七到第九个字符。这个权限定义了其他用户（不属于文件所在组，也不是文件所有者）的权限。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;目录权限规则&#34;&gt;目录权限规则&lt;/h2&gt;
&lt;p&gt;因目录也是文件，对目录读权限指可查看目录中的文件列表；对目录写权限指可删除移动创建目录里的文件或目录，即允许修改目录文件内容(对普通文件有写权限并不代表可删除该文件，只有该文件所在的目录有写权限才可删除该文件)；对目录有执行权限表示可进入该目录(检索权限)。&lt;/p&gt;
&lt;p&gt;用户必须拥有目录的执行权限才能进入该目录并访问其中的文件和子目录。因此，即使用户拥有目录中某个文件的读权限，如果目录本身没有执行权限，用户也无法访问该文件。&lt;/p&gt;
&lt;h2 id=&#34;实际用户组id有效用户组id和设置用户组id&#34;&gt;实际用户(组)ID、有效用户(组)ID和设置用户(组)ID&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linux_ch04/8ce4b2cbe46fbe17b5a553d54e0413d.png&#34;
	width=&#34;1040&#34;
	height=&#34;734&#34;
	srcset=&#34;https://sryasuka.fun/p/linux_ch04/8ce4b2cbe46fbe17b5a553d54e0413d_hue9252ae500b954421c1f990b055fb43f_340327_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linux_ch04/8ce4b2cbe46fbe17b5a553d54e0413d_hue9252ae500b954421c1f990b055fb43f_340327_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;掩码umask&#34;&gt;掩码(umask)&lt;/h2&gt;
&lt;p&gt;文件模式创建掩码（简称umask）会对这些设置进行修改，umask是一种进程属性，通常继承自其父shell，用户可以使用shell内置命令umask来改变shell进程的umask，从而控制在shell下运行程序的umask.&lt;/p&gt;
&lt;p&gt;Linux系统默认创建文件的权限位是0666(&amp;mdash;rw- rw- rw-)，默认创建目录的权限位是0777(&amp;mdash;rwxrwxrwx)，当umask值为0022(&amp;mdash; &amp;mdash; -w- -w-)时，实际创建文件的权限位是0644，目录的权限位是0755。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>标准输入输出/低级输入输出</title>
        <link>https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
        <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
        <description>&lt;img src="https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/Linux_ch02.png" alt="Featured image of post 标准输入输出/低级输入输出" /&gt;&lt;h2 id=&#34;流和文件描述符及之间的关系&#34;&gt;流和文件描述符及之间的关系&lt;/h2&gt;
&lt;p&gt;在计算机操作系统中，流和文件描述符是紧密相关的概念，它们之间的关系如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;文件描述符：文件描述符是一个非负整数，用于标识打开文件或其他输入/输出设备的唯一标识符。在Unix和类Unix系统中，每个打开的文件或设备都被分配一个文件描述符，它是操作系统内部使用的一个数字，程序可以通过文件描述符来访问文件或设备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流：流是一个抽象的概念，它表示从程序中一个地方到另一个地方的数据流动。流可以是输入流、输出流或输入/输出流，它们在程序中通过流对象来实现。流对象封装了文件描述符及其相关操作，使得程序可以以更高级别的方式进行输入和输出操作，而不需要直接操作文件描述符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流和文件描述符的关系：在Unix和类Unix系统中，每个流都与一个文件描述符相关联。例如，标准输入流stdin通常与文件描述符0相关联，标准输出流stdout通常与文件描述符1相关联，标准错误流stderr通常与文件描述符2相关联。在程序中使用流对象来进行输入/输出操作时，操作系统会自动将流对象转换为与其相关联的文件描述符来进行底层的读写操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;三个标准流&#34;&gt;三个标准流&lt;/h2&gt;
&lt;p&gt;三个标准流通常指的是：标准输入流（stdin）、标准输出流（stdout）和标准错误流（stderr），在计算机操作系统中被广泛使用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;标准输入流（stdin）：这是程序从用户那里获取输入数据的标准方式。标准输入流通常通过键盘输入，但也可以通过文件、管道或其他设备输入。在Linux和Unix操作系统中，可以使用重定向符号 &amp;ldquo;&amp;lt;&amp;rdquo; 来将一个文件中的内容输入到标准输入流中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准输出流（stdout）：这是程序输出数据的标准方式。标准输出流通常是显示在屏幕上的文本信息，但也可以重定向到文件中。在Linux和Unix操作系统中，可以使用重定向符号 &amp;ldquo;&amp;gt;&amp;rdquo; 来将标准输出流的内容写入一个文件中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准错误流（stderr）：这是程序输出错误信息的标准方式。标准错误流通常是显示在屏幕上的红色文本信息，以便用户注意到它们。与标准输出流不同，标准错误流的输出不会被重定向到文件中，除非专门使用特定的符号 &amp;ldquo;2&amp;gt;&amp;rdquo; 进行重定向。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;打开和关闭流&#34;&gt;打开和关闭流&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/dbdaf47978b7a3ed4e1da7796d97c9b.png&#34;
	width=&#34;1039&#34;
	height=&#34;725&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/dbdaf47978b7a3ed4e1da7796d97c9b_hud8960e5f205a5c08c5468e38c5f395e3_339621_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/dbdaf47978b7a3ed4e1da7796d97c9b_hud8960e5f205a5c08c5468e38c5f395e3_339621_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;143&#34;
		data-flex-basis=&#34;343px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/acc0bb53ca198d5eb8f8aa5e6a18631.png&#34;
	width=&#34;1040&#34;
	height=&#34;694&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/acc0bb53ca198d5eb8f8aa5e6a18631_hu02a583e28e8351ddc5108b249ec1cb7c_365271_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/acc0bb53ca198d5eb8f8aa5e6a18631_hu02a583e28e8351ddc5108b249ec1cb7c_365271_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/f8993d4a498f5079539cd612dff1596.png&#34;
	width=&#34;1037&#34;
	height=&#34;649&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/f8993d4a498f5079539cd612dff1596_hu03cdf560e30ff277f14be5f284443d6c_255907_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/f8993d4a498f5079539cd612dff1596_hu03cdf560e30ff277f14be5f284443d6c_255907_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;383px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;流缓冲区和内核缓冲区&#34;&gt;流缓冲区和内核缓冲区&lt;/h2&gt;
&lt;p&gt;流缓冲区：流缓冲区是在程序内部使用的一个缓冲区，它存储了要写入或读取的数据。当程序进行输出操作时，数据首先被写入到流缓冲区中，直到缓冲区满或程序调用了flush()函数或关闭流时才将数据写入到内核缓冲区中。当程序进行输入操作时，数据也是首先从内核缓冲区读取到流缓冲区中，直到缓冲区为空或程序读取了足够的数据时才会再次从内核缓冲区中读取数据。&lt;/p&gt;
&lt;p&gt;内核缓冲区：内核缓冲区是操作系统内核使用的一个缓冲区，它用于存储要写入或读取的数据。当程序进行输入操作时，数据从流缓冲区写入到内核缓冲区中，然后由内核将数据写入到磁盘或网络中。当程序进行输出操作时，数据首先从磁盘或网络中读取到内核缓冲区中，然后由内核将数据从内核缓冲区中复制到流缓冲区中，供程序读取。&lt;/p&gt;
&lt;p&gt;总体上，流缓冲区是程序内部使用的缓冲区，它可以提高输入/输出操作的效率。内核缓冲区是操作系统内核使用的缓冲区，它可以提高磁盘和网络读写的效率。流缓冲区和内核缓冲区的关系是：程序将数据写入到流缓冲区中，然后由内核将数据从流缓冲区复制到内核缓冲区中；或者程序从内核缓冲区中读取数据，然后将数据存储到流缓冲区中。&lt;/p&gt;
&lt;h2 id=&#34;流缓冲区类型&#34;&gt;流缓冲区类型&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/c7f693f22d27681d106f68f63c621cd.png&#34;
	width=&#34;1042&#34;
	height=&#34;738&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/c7f693f22d27681d106f68f63c621cd_hu64c75ec206f9beae57026efca42c33b5_278010_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/c7f693f22d27681d106f68f63c621cd_hu64c75ec206f9beae57026efca42c33b5_278010_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;338px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;文件描述符表打开文件表和i-node表&#34;&gt;文件描述符表、打开文件表和i-node表&lt;/h2&gt;
&lt;p&gt;在 Unix/Linux 系统中，文件是使用文件描述符（file descriptor）来进行操作的。文件描述符是一个整数，它代表一个文件被打开后在内核中的一个唯一标识符。当应用程序打开一个文件时，内核会分配一个文件描述符，并使用该文件描述符来标识该文件。文件描述符表、打开文件表和 i-node 表是三个与文件操作密切相关的概念，它们分别记录了文件描述符、打开文件和文件在磁盘上的存储位置。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;文件描述符表：文件描述符表是每个进程都有的一个表，它记录了进程中每个打开的文件描述符与内核中的文件描述符之间的映射关系。当应用程序打开一个文件时，内核会分配一个文件描述符，并将其添加到文件描述符表中，以便应用程序在之后的操作中可以使用该文件描述符来标识该文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开文件表：打开文件表是内核中的一个表，它记录了所有当前被打开的文件的信息，包括文件描述符、文件偏移量、读写模式、文件状态等等。当应用程序打开一个文件时，内核会在打开文件表中创建一个新的表项，并将该表项与文件描述符关联起来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;i-node 表：i-node 表是在磁盘上维护的一个表，它记录了文件的所有属性和存储位置。每个文件在 i-node 表中都有一个唯一的 i-node 号码，该号码与文件的所有属性和存储位置相关联。当应用程序打开一个文件时，内核会通过文件的 i-node 号码在 i-node 表中查找该文件的相关信息，包括文件类型、访问权限、文件大小、创建时间等等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这三个表之间的关系是：文件描述符表中的文件描述符指向打开文件表中的打开文件，而打开文件表中的打开文件又与 i-node 表中的文件相关联。在进行文件操作时，应用程序使用文件描述符来标识文件，内核根据文件描述符在打开文件表中查找相应的打开文件，然后根据打开文件中的 i-node 号码在 i-node 表中查找文件的相关信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/127693479e49ee78034ea5bfe5c2357.png&#34;
	width=&#34;1038&#34;
	height=&#34;734&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/127693479e49ee78034ea5bfe5c2357_hu9be0fe81f573b98523b31413e22c1598_187349_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/127693479e49ee78034ea5bfe5c2357_hu9be0fe81f573b98523b31413e22c1598_187349_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;339px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/d0fb83038beb32cae2c50b18acc52f0.png&#34;
	width=&#34;1048&#34;
	height=&#34;737&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/d0fb83038beb32cae2c50b18acc52f0_huaf8b97cb1279930ccec321e0dc6f1494_171038_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E4%BD%8E%E7%BA%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/d0fb83038beb32cae2c50b18acc52f0_huaf8b97cb1279930ccec321e0dc6f1494_171038_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;341px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linux，GPL，UNIX介绍</title>
        <link>https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/</link>
        <pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/</guid>
        <description>&lt;img src="https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/Linux_ch01.png" alt="Featured image of post Linux，GPL，UNIX介绍" /&gt;&lt;h2 id=&#34;unix标准及两级规范符号度&#34;&gt;UNIX标准及两级规范符号度&lt;/h2&gt;
&lt;p&gt;UNIX是一个操作系统的家族，它的标准是由The Open Group制定的。该标准包括了Single UNIX Specification和POSIX标准两个级别。&lt;/p&gt;
&lt;p&gt;Single UNIX Specification（SUS）是一份针对UNIX系统的单一规范，它包括了许多开放标准和互操作性标准，用于确保UNIX系统在不同的平台上保持一致的行为。SUS包括了许多子规范，包括基本系统接口、命令和工具、系统管理、应用程序接口等。&lt;/p&gt;
&lt;p&gt;POSIX标准定义了UNIX系统应该提供的一组接口，这些接口主要用于实现可移植的UNIX应用程序。POSIX标准涵盖了操作系统、编程语言和工具等方面，包括了许多子规范，如POSIX.1，POSIX.2等。&lt;/p&gt;
&lt;h2 id=&#34;gpllgpl&#34;&gt;GPL/LGPL&lt;/h2&gt;
&lt;p&gt;GPL软件允许商业销售，但不允许闭源。它确保了程序代码永远能让所有人自由使用。&lt;/p&gt;
&lt;p&gt;LGPL软件/库允许商业销售，但不允许闭源；但动态链接LGPL库时，允许软件闭源。它主要为库的使用而设计的许可。&lt;/p&gt;
&lt;h2 id=&#34;unix哲学&#34;&gt;UNIX哲学&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;小即是美&lt;/li&gt;
&lt;li&gt;让每一个程序只做好一件事&lt;/li&gt;
&lt;li&gt;尽快建立原型&lt;/li&gt;
&lt;li&gt;舍高效率而取可移植性 &amp;ndash;代码可移植&lt;/li&gt;
&lt;li&gt;采用纯文本文件存储数据 &amp;ndash;数据可移植&lt;/li&gt;
&lt;li&gt;充分利用软件的杠杆效应&lt;/li&gt;
&lt;li&gt;使用shell脚本来提高杠杆效应和可移植性&lt;/li&gt;
&lt;li&gt;避免强制性的用户界面&lt;/li&gt;
&lt;li&gt;灵活性：编程时应尽量考虑到灵活性，尽量避免随意限制字段长度或记录数目。&lt;/li&gt;
&lt;li&gt;可重用组件：将应用程序的核心实现为库。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;linux标准&#34;&gt;Linux标准&lt;/h2&gt;
&lt;p&gt;Linux标准是由Linux Standard Base（LSB）组织定义和维护的，它是一个用于确保不同Linux发行版之间二进制兼容性的标准。&lt;/p&gt;
&lt;p&gt;LSB规范定义了一组Linux系统所必须支持的接口、库和命令等，这些接口和命令可用于开发和运行Linux应用程序，从而提高应用程序的可移植性和互操作性。&lt;/p&gt;
&lt;h2 id=&#34;内核态和用户态&#34;&gt;内核态和用户态&lt;/h2&gt;
&lt;p&gt;现代处理器架构一般允许CPU至少在两种不同状态下运行，即内核态和用户态。执行硬件指令可使CPU在两种状态间来回切换。&lt;/p&gt;
&lt;p&gt;进程所能访问的存储位置范围称为虚拟地址空间。与之对应，虚拟内存空间也分为内核空间和用户空间。进程在用户态下运行时，CPU只能访问用户空间，试图访问内核空间的内存将会引起硬件异常。当运行于内核态时，CPU既能访问用户空间内存，也能访问内核空间内存。&lt;/p&gt;
&lt;h2 id=&#34;shell提示符结构&#34;&gt;shell提示符结构&lt;/h2&gt;
&lt;p&gt;常见的 shell有：&lt;/p&gt;
&lt;p&gt;Bash(the GNU Bourne-Again Shell)、TC shell、Z shell；   //Linux&lt;/p&gt;
&lt;p&gt;Bourne shell、Korn shell、C shell  //UNIX&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/53a72d471cf5ecd5fcdab87448a9da2.png&#34;
	width=&#34;1055&#34;
	height=&#34;740&#34;
	srcset=&#34;https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/53a72d471cf5ecd5fcdab87448a9da2_hu55f63cd296e4cb3b01385da22a6cc2d4_252315_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/53a72d471cf5ecd5fcdab87448a9da2_hu55f63cd296e4cb3b01385da22a6cc2d4_252315_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;342px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;常见的Shell提示符结构包括以下几个组成部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用户名：表示当前登录系统的用户名，可以使用环境变量$USER或$(whoami)来获取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主机名：表示当前计算机的主机名或IP地址，可以使用环境变量$HOSTNAME或$(hostname)来获取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当前工作目录：表示当前所在的工作目录，可以使用环境变量$PWD来获取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shell类型或版本号：表示当前Shell的类型或版本号，可以使用环境变量$SHELL或$BASH_VERSION来获取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提示符符号：表示提示符的结束符号，一般为$或#，其中$表示普通用户，#表示超级用户（即root用户）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;linux重定向命令&#34;&gt;Linux重定向命令&lt;/h2&gt;
&lt;p&gt;输出重定向（&amp;gt;）：将命令执行的结果输出到一个文件中，可以使用大于符号（&amp;gt;）进行重定向。&lt;/p&gt;
&lt;p&gt;输出追加重定向（&amp;raquo;）：与输出重定向类似，但是将命令执行的结果追加到文件的末尾而不是覆盖原有内容。&lt;/p&gt;
&lt;p&gt;输入重定向（&amp;lt;）：将一个文件中的内容作为命令的输入数据，可以使用小于符号（&amp;lt;）进行重定向。&lt;/p&gt;
&lt;p&gt;文件描述符重定向（&amp;amp;&amp;gt;）：将命令执行的结果同时重定向到标准输出和标准错误输出文件中。&lt;/p&gt;
&lt;h2 id=&#34;后台运行命令&#34;&gt;后台运行命令&lt;/h2&gt;
&lt;p&gt;在Linux或Unix系统中，可以通过在命令末尾加上&amp;amp;符号，将命令放入后台运行。这种方式可以使得命令在后台执行，而不会占用终端或命令行界面的资源，同时也可以在命令执行过程中继续使用终端或命令行界面进行其他操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;后台运行普通命令：在普通命令末尾加上&amp;amp;符号即可将命令放入后台运行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;sleep 10 &amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;后台运行交互式命令：对于交互式命令，如果直接加上&amp;amp;符号，命令仍然会在前台运行。可以使用nohup命令将交互式命令转为后台运行模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;nohup python3 -i&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;挂起已经在前台运行的命令：如果已经在前台运行的命令需要挂起，可以使用Ctrl + Z快捷键将其暂停，并放入后台运行。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tar czf backup.tar.gz /path/to/backup &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[1] 12345
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ fg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;系统调用和库函数间关系&#34;&gt;系统调用和库函数间关系&lt;/h2&gt;
&lt;p&gt;操作系统具有两种功能：为用户程序提供抽象和管理计算机资源。通常程序和OS之间处理的是前者，例如，创建、写入、读出和删除文件。对用户而言，资源管理部分主要是透明和自动完成的。&lt;/p&gt;
&lt;p&gt;系统调用就是OS的一些内建函数，这些函数为应用程序提供了对计算机资源的抽象，使程序同硬件特性相隔离。从编程的角度看，系统调用的集合及系统调用的内部实现形成了OS的内核。&lt;/p&gt;
&lt;p&gt;C使用_syscall宏，可以直接调用任何系统调用。然而，为了调用方便，标准C库提供了一组针对最常用系统调用的封装(wrapper)函数。封装函数与系统调用通常同名，它将系统调用参数打好包，通过适当的方式陷入内核执行，然后将返回状态传递给应用程序。&lt;/p&gt;
&lt;p&gt;内核是为用户进程运行的，它不是与用户进程平行运行的独立的进程集合，而是每个用户进程的一部分。  用户进程的代码由用户代码(应用程序代码+库)和内核代码组成，执行时常常在用户态和内核态之间切换。&lt;/p&gt;
&lt;p&gt;系统调用通常需要通过内核态和用户态之间的上下文切换来完成，因此效率相对较低，但提供了更底层、更强大的功能。开销大&lt;/p&gt;
&lt;p&gt;库函数通常是在用户态中执行的，因此效率相对较高，但功能相对较弱。开销小。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/c4bfa8a76896792f95fbeaefe57bb84.png&#34;
	width=&#34;1041&#34;
	height=&#34;733&#34;
	srcset=&#34;https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/c4bfa8a76896792f95fbeaefe57bb84_hu63518c9c20c7e0555eca2de175dc7abb_462478_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/c4bfa8a76896792f95fbeaefe57bb84_hu63518c9c20c7e0555eca2de175dc7abb_462478_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在需要对系统进行精确控制时，最好使用系统调用，这可以避免使用库函数带来的一些想不到的问题。&lt;/p&gt;
&lt;p&gt;保留字： 保留字是系统专门保留使用权，并有特定含义的名字，具有唯一性。&lt;/p&gt;
&lt;h2 id=&#34;常见的一级目录&#34;&gt;常见的一级目录&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/62f4b67af991f0f25a7bc9b1df8218c.png&#34;
	width=&#34;1037&#34;
	height=&#34;739&#34;
	srcset=&#34;https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/62f4b67af991f0f25a7bc9b1df8218c_hub86acc0889563d0d549c11357cb5d258_311131_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/62f4b67af991f0f25a7bc9b1df8218c_hub86acc0889563d0d549c11357cb5d258_311131_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;336px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/7eb2fdafc1082b0e3c4c8217b4f3549.png&#34;
	width=&#34;1041&#34;
	height=&#34;708&#34;
	srcset=&#34;https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/7eb2fdafc1082b0e3c4c8217b4f3549_hu55c6049637ec3e5f19cc4f7abec42c05_223102_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/7eb2fdafc1082b0e3c4c8217b4f3549_hu55c6049637ec3e5f19cc4f7abec42c05_223102_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;352px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;链接和库&#34;&gt;链接和库&lt;/h2&gt;
&lt;p&gt;可执行程序的生成需要经历预处理、编译、汇编、链接4个阶段。&lt;/p&gt;
&lt;p&gt;默认情况下，链接器只搜索默认lib目录(/lib和/usr/lib)中的C标准库libc.a或者libc.so；其余的库(如数学库libm.a或libm.so)则需要指定库的名字甚至库的路径信息才能被链接器搜索到。&lt;/p&gt;
&lt;p&gt;链接的时机：
编译时，即源代码被翻译成机器代码时 (ld)
加载时，即在程序被加载器加载到存储器并准备执行时(ld-linux.so)
运行时，即程序正在运行时(libdl.so.2)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/34a9e51eae304c6ec6ccf4a9c6c922c.png&#34;
	width=&#34;1037&#34;
	height=&#34;691&#34;
	srcset=&#34;https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/34a9e51eae304c6ec6ccf4a9c6c922c_hu80f8a52ba8973e1f9e2a52dee9d9dc91_412641_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/34a9e51eae304c6ec6ccf4a9c6c922c_hu80f8a52ba8973e1f9e2a52dee9d9dc91_412641_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/4df6ddde168fe410e136292513817d3.png&#34;
	width=&#34;1047&#34;
	height=&#34;738&#34;
	srcset=&#34;https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/4df6ddde168fe410e136292513817d3_hu56a3451afea25c775d826adad2878171_201930_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/linuxgplunix%E4%BB%8B%E7%BB%8D/4df6ddde168fe410e136292513817d3_hu56a3451afea25c775d826adad2878171_201930_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>栈和队列</title>
        <link>https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</link>
        <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</guid>
        <description>&lt;img src="https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/Stacks_and_queues.png" alt="Featured image of post 栈和队列" /&gt;&lt;h2 id=&#34;栈和队列&#34;&gt;栈和队列&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;目标：
1. 掌握栈和队列的特点，并能在相应的应用问题中正确选用
2. 熟练掌握栈的两种存储结构的基本操作实现算法，特别应注意栈满和栈空的条件
3. 熟练掌握循环队列和链队列的基本操作实现算法，特别注意队满和队空的条件
4. 理解递归算法执行过程中栈的状态变化过程
5. 掌握表达式求值 方法
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;栈的定义&#34;&gt;栈的定义&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义：只能在表的一端（栈顶）进行插入和删除运算的线性表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑结构：与线性表相同，仍为一对一关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储结构：用顺序栈或链栈存储均可，但以顺序栈更常见&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运算规则：只能在栈顶运算，且访问结点时依照后进先出（LIFO）或先进后出（FILO）的原则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现方法：关键是编写入栈和出栈函数，具体实现依顺序栈或链栈的不同而不同。基本操作有入栈、出栈、读栈顶元素值、建栈、判断栈满、栈空等&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;队列的定义&#34;&gt;队列的定义&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义：只能在表的一端（队尾）进行插入，在另一端（队头）进行删除运算的线性表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑结构：与线性表相同，仍为一对一关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储结构：用顺序队列或链队存储均可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运算规则：先进先出（FIFO）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现方式：关键是编写入队和出队函数，具体实现依顺序队或链队的不同而不同&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;栈队列和一般线性表的区别&#34;&gt;*栈，队列和一般线性表的区别&lt;/h3&gt;
&lt;p&gt;栈、队列是一种特殊（操作受限）的线性表&lt;/p&gt;
&lt;p&gt;区别：仅在于运算规则不同&lt;/p&gt;
&lt;p&gt;一般线性表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;逻辑结构：一对一&lt;/li&gt;
&lt;li&gt;存储结构：顺序表、链表&lt;/li&gt;
&lt;li&gt;运算规则：随机、顺序存取&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;栈&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;逻辑结构：一对一&lt;/li&gt;
&lt;li&gt;存储结构：顺序栈、链栈&lt;/li&gt;
&lt;li&gt;运算规则：后进先出&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;队列&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;逻辑结构：一对一&lt;/li&gt;
&lt;li&gt;存储结构：顺序队、链队&lt;/li&gt;
&lt;li&gt;运算规则：先进先出&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;栈的表示和操作的实现&#34;&gt;栈的表示和操作的实现&lt;/h3&gt;
&lt;p&gt;进栈 = 压入 = PUSH()&lt;/p&gt;
&lt;p&gt;出栈 = 弹出 = POP()&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顺序栈与顺序表的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/8fdc7ee61f6153bb363779999d8e622.png&#34;
	width=&#34;762&#34;
	height=&#34;572&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/8fdc7ee61f6153bb363779999d8e622_hud1147f5ac4ba4c320d3a4d066a46debe_38411_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/8fdc7ee61f6153bb363779999d8e622_hud1147f5ac4ba4c320d3a4d066a46debe_38411_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;顺序栈的表示&#34;&gt;顺序栈的表示&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#define  MAXSIZE  100
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typedef struct{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	SElemType   *base;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	SElemType   *top;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	int stacksize;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}SqStack;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;顺序栈初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status InitStack( SqStack &amp;amp;S )
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	S.base =new SElemType[MAXSIZE]；
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	if( !S.base ) 	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           return OVERFLOW;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	S.top = S.base;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	S.stackSize = MAXSIZE;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;判断顺序栈是否为空&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bool StackEmpty( SqStack S )
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	if(S.top == S.base) 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          return true;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   else 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          return false;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;清空顺序栈&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status ClearStack( SqStack S )
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	if( S.base ) S.top = S.base;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;销毁顺序栈&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status DestroyStack( SqStack &amp;amp;S )
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	if( S.base )
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		delete S.base ;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		S.stacksize = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		S.base = S.top = NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;顺序栈进栈&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status Push( SqStack &amp;amp;S, SElemType e)  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	if( S.top - S.base== S.stacksize ) // 栈满
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        return ERROR; 	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	*S.top++=e; // *S.top = e; S.top++;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;顺序栈出栈&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status Pop( SqStack &amp;amp;S, SElemType &amp;amp;e)  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	if( S.top == S.base ) // 栈空
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        return ERROR; 	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	e＝ *--S.top; // --S.top; e = *S.top;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	return OK; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;链栈的表示&#34;&gt;链栈的表示&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typedef  struct StackNode {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      SElemType  data;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      struct StackNode *next;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; } StackNode,  *LinkStack;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void InitStack(LinkStack &amp;amp;S )
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	S=NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;判断链栈是否为空&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status StackEmpty(LinkStack S)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if (S==NULL) return TRUE;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    else return FALSE;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;链栈进栈&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status Push(LinkStack &amp;amp;S , SElemType e)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    p=new StackNode;      //生成新结点p 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if (!p) exit(OVERFLOW);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    p-&amp;gt;data=e; p-&amp;gt;next=S; S=p; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return OK; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;链栈出栈&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status Pop (LinkStack &amp;amp;S,SElemType &amp;amp;e)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if (S==NULL) return ERROR;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    e = S-&amp;gt; data;  p = S;   S =  S-&amp;gt; next;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    delete p;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return OK; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;取链栈栈顶元素&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SElemType GetTop(LinkStack S)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       if (S==NULL) exit(1)；
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        else return S–&amp;gt;data;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;栈与递归&#34;&gt;栈与递归&lt;/h3&gt;
&lt;p&gt;递归的定义：若一个对象部分地包含它自己,  或用它自己给自己定义,  则称这个对象是递归的；若一个过程直接地或间接地调用自己, 则称这个过程是递归的过程&lt;/p&gt;
&lt;h4 id=&#34;函数调用过程&#34;&gt;函数调用过程&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/05d4a809cde50e5a4d0ee8b7c9cd26d.png&#34;
	width=&#34;764&#34;
	height=&#34;568&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/05d4a809cde50e5a4d0ee8b7c9cd26d_hu8a9f6bd18c77db0056b4b3ddce738c6e_63433_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/05d4a809cde50e5a4d0ee8b7c9cd26d_hu8a9f6bd18c77db0056b4b3ddce738c6e_63433_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;322px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;时间效率：与递归树的结点数成正比 $$ \def \bar#1{#1^n} O(\bar{2}) $$&lt;/p&gt;
&lt;p&gt;空间效率：与递归树的深度成正比  $$ \def \bar#1{n} O(\bar{}) $$&lt;/p&gt;
&lt;h4 id=&#34;递归的优缺点&#34;&gt;递归的优缺点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;优点：结构清晰，程序易读&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：每次调用要生成工作记录，保存状态信息，入栈；返回时要出栈，恢复状态信息。时间开销大。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;队列的表示和操作的实现&#34;&gt;队列的表示和操作的实现&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#define M  100   //最大队列长度
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Typedef struct {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   QElemType *base;  //初始化的动态分配存储空间
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   int  front;            //头指针   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   int  rear;             //尾指针
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}SqQueue;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一维队列：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/decb85254c6435b8a8eed76e795564b.png&#34;
	width=&#34;766&#34;
	height=&#34;573&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/decb85254c6435b8a8eed76e795564b_hub64041402f87702c578f8138219d39d0_48689_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/decb85254c6435b8a8eed76e795564b_hub64041402f87702c578f8138219d39d0_48689_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;存在问题：无法确认是否真溢出
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;循环队列：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/43683f506ad72a606004f7e13225358.png&#34;
	width=&#34;767&#34;
	height=&#34;570&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/43683f506ad72a606004f7e13225358_hu6b4aae2c812d514f25964d34fda3ff52_196436_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/43683f506ad72a606004f7e13225358_hu6b4aae2c812d514f25964d34fda3ff52_196436_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;322px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/e3aed83776b9ed0e5b08f9a50b645ff.png&#34;
	width=&#34;761&#34;
	height=&#34;599&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/e3aed83776b9ed0e5b08f9a50b645ff_hu7815fdb4f7f745b26724f7adba2bd8c7_60950_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/e3aed83776b9ed0e5b08f9a50b645ff_hu7815fdb4f7f745b26724f7adba2bd8c7_60950_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;127&#34;
		data-flex-basis=&#34;304px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;循环队列初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   Status InitQueue (SqQueue &amp;amp;Q){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Q.base =new QElemType[MAXQSIZE] 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   if(!Q.base) exit(OVERFLOW);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Q.front=Q.rear=0;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;求循环队列的长度&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int  QueueLength (SqQueue Q){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return (Q.rear-Q.front+MAXQSIZE)%MAXQSIZE;                             
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;循环队列入队&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status EnQueue(SqQueue &amp;amp;Q,QElemType e){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if((Q.rear+1)%MAXQSIZE==Q.front)  return ERROR;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Q.base[Q.rear]=e;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Q.rear=(Q.rear+1)%MAXQSIZE;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;循环队列出队&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status DeQueue (LinkQueue &amp;amp;Q,QElemType &amp;amp;e){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   if(Q.front==Q.rear) return ERROR;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   e=Q.base[Q.front];
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   Q.front=(Q.front+1)%MAXQSIZE;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;*链队列&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/e3becd2db5e4c5936ef80bcd2b34170.png&#34;
	width=&#34;760&#34;
	height=&#34;574&#34;
	srcset=&#34;https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/e3becd2db5e4c5936ef80bcd2b34170_hu696358a241d63833534da8db3797f766_26253_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/e3becd2db5e4c5936ef80bcd2b34170_hu696358a241d63833534da8db3797f766_26253_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;317px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;链队列初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status InitQueue (LinkQueue &amp;amp;Q){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   Q.front=Q.rear=(QueuePtr) malloc(sizeof(QNode)); 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if(!Q.front) exit(OVERFLOW);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Q.front-&amp;gt;next=NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;销毁链队列&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status DestroyQueue (LinkQueue &amp;amp;Q){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   while(Q.front){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      Q.rear=Q.front-&amp;gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      free(Q.front);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      Q.front=Q.rear;   }    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;判断链队列是否为空&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; Status QueueEmpty (LinkQueue Q){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return (Q.front==Q.rear);                             
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;求链队列的队头元素&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status GetHead (LinkQueue Q, QElemType &amp;amp;e){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   if(Q.front==Q.rear) return ERROR;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   e=Q.front-&amp;gt;next-&amp;gt;data;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;链队列入队&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status EnQueue(LinkQueue &amp;amp;Q,QElemType e){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    p=(QueuePtr)malloc(sizeof(QNode));
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if(!p) exit(OVERFLOW);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    p-&amp;gt;data=e; p-&amp;gt;next=NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Q.rear-&amp;gt;next=p;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Q.rear=p;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;链队列出队&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status DeQueue (LinkQueue &amp;amp;Q,QElemType &amp;amp;e){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   if(Q.front==Q.rear) return ERROR;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   p=Q.front-&amp;gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   e=p-&amp;gt;data;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   Q.front-&amp;gt;next=p-&amp;gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   if(Q.rear==p) Q.rear=Q.front;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   delete p;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>线性表</title>
        <link>https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/</link>
        <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid>
        <description>&lt;img src="https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/Linear_tables.png" alt="Featured image of post 线性表" /&gt;&lt;h2 id=&#34;线性表&#34;&gt;线性表&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;目标：  
1. 线性结构特点
2. 顺序表的定义，创建，插入，删除
3. 链表的定义，创建，插入，删除
4. 场景分析
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;特点&#34;&gt;特点&lt;/h3&gt;
&lt;p&gt;用数据元素的有限序列表示
同一线性表中的元素必定具有相同的特性&lt;/p&gt;
&lt;h3 id=&#34;顺序表&#34;&gt;顺序表&lt;/h3&gt;
&lt;p&gt;顺序表又称 顺序存储结构/顺序映像&lt;/p&gt;
&lt;p&gt;定义: 逻辑上相邻，物理上也相邻&lt;/p&gt;
&lt;p&gt;存储方法: 用一组地址连续的存储单元依次存储线性表的元素，可通过数组V[n]来实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/04ebf8cd51cb7f7efc0b718b435136a.png&#34;
	width=&#34;710&#34;
	height=&#34;534&#34;
	srcset=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/04ebf8cd51cb7f7efc0b718b435136a_hu47ec4708d0e5cf418e9a3306f5e51a6a_19988_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/04ebf8cd51cb7f7efc0b718b435136a_hu47ec4708d0e5cf418e9a3306f5e51a6a_19988_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;顺序表的类型定义&#34;&gt;顺序表的类型定义&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/08ea3928ba3a51556d9aca70ca20e0c.png&#34;
	width=&#34;709&#34;
	height=&#34;337&#34;
	srcset=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/08ea3928ba3a51556d9aca70ca20e0c_hu9d97a5fcdfd6d882e71226551ba6ba29_22300_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/08ea3928ba3a51556d9aca70ca20e0c_hu9d97a5fcdfd6d882e71226551ba6ba29_22300_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;504px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/9c66ae3da8cf972a7ccbbcb925c35af.png&#34;
	width=&#34;711&#34;
	height=&#34;500&#34;
	srcset=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/9c66ae3da8cf972a7ccbbcb925c35af_hu672df7e40e91fa5e1ef331e391b27cd4_42767_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/9c66ae3da8cf972a7ccbbcb925c35af_hu672df7e40e91fa5e1ef331e391b27cd4_42767_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;341px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;顺序表的基本算法操作&#34;&gt;顺序表的基本算法操作&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status InitList_Sq(SqList &amp;amp;L){    //构造一个空的顺序表L
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    L.elem=new ElemType[MAXSIZE];   //为顺序表分配空间
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if(!L.elem) exit(OVERFLOW);       //存储分配失败
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    L.length=0;		   //空表长度为0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}   //参数使用引用
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status InitList_Sq(SqList *L){    //构造一个空的顺序表L
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    L-&amp;gt; elem=new ElemType[MAXSIZE];   //为顺序表分配空间
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if(! L-&amp;gt; elem) exit(OVERFLOW);       //存储分配失败
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    L-&amp;gt; length=0;	            	  //空表长度为0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}   //参数使用指针
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;取值（根据位置i获取对应位置的数据元素）&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int GetElem(SqList L,int i,ElemType &amp;amp;e)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  if (i&amp;lt;1||i&amp;gt;L.length) return ERROR;   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   //判断i值是否合理，若不合理，返回ERROR
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  e=L.elem[i-1];   //第i-1的单元存储着第i个数据
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;查找（根据指定数据获取数据所在的位置）&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int LocateELem(SqList L,ElemType e)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  for (i=0;i&amp;lt; L.length;i++)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      if (L.elem[i]==e) return i+1;                
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  return 0;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;插入（插在第 i 个结点之前）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（1）判断插入位置i 是否合法。&lt;/p&gt;
&lt;p&gt;（2）判断顺序表的存储空间是否已满。&lt;/p&gt;
&lt;p&gt;（3）将第n至第i 位的元素依次向后移动一个位置，空出第i个位置。&lt;/p&gt;
&lt;p&gt;（4）将要插入的新元素e放入第i个位置。&lt;/p&gt;
&lt;p&gt;（5）表长加1，插入成功返回OK。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status ListInsert_Sq(SqList &amp;amp;L,int i ,ElemType e){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   if(i&amp;lt;1 || i&amp;gt;L.length+1) return ERROR;	         //i值不合法
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   if(L.length==MAXSIZE) return ERROR;    //当前存储空间已满     
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   for(j=L.length-1;j&amp;gt;=i-1;j--) 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       L.elem[j+1]=L.elem[j];    //插入位置及之后的元素后移
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   L.elem[i-1]=e;                     //将新元素e放入第i个位置
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   ++L.length;		     	//表长增1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;删除（删除第i个节点）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（1）判断删除位置i 是否合法（合法值为1≤i≤n）。&lt;/p&gt;
&lt;p&gt;（2）将欲删除的元素保留在e中。&lt;/p&gt;
&lt;p&gt;（3）将第i+1至第n 位的元素依次向前移动一个位置。&lt;/p&gt;
&lt;p&gt;（4）表长减1，删除成功返回OK。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status ListDelete_Sq(SqList &amp;amp;L,int i){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   if((i&amp;lt;1)||(i&amp;gt;L.length)) return ERROR;	 //i值不合法
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   for (j=i;j&amp;lt;=L.length-1;j++)                   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;　  　L.elem[j-1]=L.elem[j];       //被删除元素之后的元素前移  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   --L.length;               	      //表长减1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;顺序表的特点&#34;&gt;顺序表的特点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;利用数据元素的存储位置表示线性表中相邻数据元素之间的前后关系，即线性表的逻辑结构与存储结构一致&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在访问线性表时，可以快速地计算出任何一个数据元素的存储地址。因此可以粗略地认为，访问每个元素所花时间相等　&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;这种存取方法称为随机存取法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;存储密度大（结点本身所占存储量/结点结构所占存储量）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以随机存取表中任一元素&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在插入、删除某一元素时，需要移动大量元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;浪费存储空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属于静态存储形式，数据元素的个数不能自由扩充&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;顺序表的时间空间复杂度&#34;&gt;顺序表的时间，空间复杂度&lt;/h4&gt;
&lt;p&gt;查找、插入、删除算法的平均时间复杂度为 O(n)&lt;/p&gt;
&lt;p&gt;顺序表的空间复杂度S(n)=O(1) （没有占用辅助空间）&lt;/p&gt;
&lt;h3 id=&#34;链表&#34;&gt;链表&lt;/h3&gt;
&lt;p&gt;结点在存储器中的位置是任意的即逻辑上相邻的数据元素在物理上不一定相邻&lt;/p&gt;
&lt;p&gt;通过指针进行实现&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/c49c92009a803a7082856e43d355f05.png&#34;
	width=&#34;712&#34;
	height=&#34;507&#34;
	srcset=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/c49c92009a803a7082856e43d355f05_hu0840fb224e63a2c3a8405bf387eca9f4_35150_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/c49c92009a803a7082856e43d355f05_hu0840fb224e63a2c3a8405bf387eca9f4_35150_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;337px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;各结点由两个域组成：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据域&lt;/strong&gt;：存储元素数值数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;指针域&lt;/strong&gt;：存储直接后继结点的存储位置&lt;/p&gt;
&lt;p&gt;链表的分类：单链表，双链表，循环链表&lt;/p&gt;
&lt;p&gt;单链表：结点只有一个指针域。&lt;/p&gt;
&lt;p&gt;双链表：结点有两个指针域的链表&lt;/p&gt;
&lt;p&gt;循环链表：首尾相接的链表&lt;/p&gt;
&lt;h4 id=&#34;头指针头结点和首元结点&#34;&gt;头指针，头结点和首元结点&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/76aa9d3fff2bd19916aaad6c4947d2d.png&#34;
	width=&#34;712&#34;
	height=&#34;534&#34;
	srcset=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/76aa9d3fff2bd19916aaad6c4947d2d_hucb844caa1bb6ab2acdefb8fe34f9aeda_51659_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/76aa9d3fff2bd19916aaad6c4947d2d_hucb844caa1bb6ab2acdefb8fe34f9aeda_51659_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;链表表头设置头结点的好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便首元结点处理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首元结点的地址保存在头结点的指针域中,所以在链表的第一个位置上的操作和其它位置一致，无须进行特殊处理;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;便于空表和非空表的统一处理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;无论链表是否为空，头指针都是指向头结点的非空指针，因此空表和非空表的处理也就统一了。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PS：头结点可以为空，也可以存储线性表长度的附加信息，不会被记录长度&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;单链表的定义与实现&#34;&gt;单链表的定义与实现&lt;/h4&gt;
&lt;p&gt;单链表是由表头唯一确定，因此单链表可以用头指针的名字来命名&lt;/p&gt;
&lt;p&gt;若头指针名是L，则把链表称为表L&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/05d2654d226728c622e1b3b054e0a98.png&#34;
	width=&#34;712&#34;
	height=&#34;537&#34;
	srcset=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/05d2654d226728c622e1b3b054e0a98_hua5f1488fefb6950702acf25e36931dc7_33905_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/05d2654d226728c622e1b3b054e0a98_hua5f1488fefb6950702acf25e36931dc7_33905_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;318px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;LNode * 与 LinkList 等价&lt;/p&gt;
&lt;h4 id=&#34;单链表的基本算法操作&#34;&gt;单链表的基本算法操作&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status InitList_L(LinkList &amp;amp;L){ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   L=new LNode;                    	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   L-&amp;gt;next=NULL;　　　　　
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   return OK; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;销毁&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status DestroyList_L(LinkList &amp;amp;L){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    LinkList p;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       while(L)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            p=L;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            L=L-&amp;gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            delete p;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;清空&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status ClearList(LinkList &amp;amp; L){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  // 将L重置为空表 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   LinkList p,q;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   p=L-&amp;gt;next;   //p指向第一个结点
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   while(p)       //没到表尾 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      {  q=p-&amp;gt;next; delete p;     p=q;   }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   L-&amp;gt;next=NULL;   //头结点指针域为空 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   return OK;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;求表长&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int  ListLength_L(LinkList L){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//返回L中数据元素个数
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    LinkList p;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    p=L-&amp;gt;next;  //p指向第一个结点
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     i=0;             
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     while(p){//遍历单链表,统计结点数
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           i++;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           p=p-&amp;gt;next;    } 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return i;                             
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;判断表是否为空&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int ListEmpty(LinkList L){ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//若L为空表，则返回1，否则返回0 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   if(L-&amp;gt;next)   //非空 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     return 0;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   else
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     return 1;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;取值（根据位置i获取相应位置数据元素的内容）&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status GetElem_L(LinkList L,int i,ElemType &amp;amp;e){ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    p=L-&amp;gt;next;j=1;   //初始化
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     while(p&amp;amp;&amp;amp;j&amp;lt;i){	//向后扫描，直到p指向第i个元素或p为空 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       p=p-&amp;gt;next; ++j; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     } 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     if(!p || j&amp;gt;i)return ERROR; //第i个元素不存在 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     e=p-&amp;gt;data;      //取第i个元素 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     return OK; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}//GetElem_L 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;查找（根据指定数据获取数据所在的位置）&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LNode *LocateELem_L (LinkList L，Elemtype e) {  //返回L中值为e的数据元素的地址，查找失败返回NULL
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  p=L-&amp;gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  while(p &amp;amp;&amp;amp;p-&amp;gt;data!=e)  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        p=p-&amp;gt;next;                		
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  return p; 	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;插入（插在第 i 个结点之前）&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status ListInsert_L(LinkList &amp;amp;L,int i,ElemType e){ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     p=L;j=0; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      while(p&amp;amp;&amp;amp;j&amp;lt;i−1){p=p-&amp;gt;next;++j;}	//寻找第i−1个结点 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      if(!p||j&amp;gt;i−1)return ERROR;	//i大于表长 + 1或者小于1  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      s=new LNode;			//生成新结点s 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      s-&amp;gt;data=e;      		           //将结点s的数据域置为e 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      s-&amp;gt;next=p-&amp;gt;next;	   	          //将结点s插入L中 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      p-&amp;gt;next=s; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      return OK; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}//ListInsert_L 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;删除（删除第 i 个结点）&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; Status ListDelete_L(LinkList &amp;amp;L,int i,ElemType &amp;amp;e){
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    p=L;j=0; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    while(p-&amp;gt;next &amp;amp;&amp;amp;j&amp;lt;i-1){//寻找第i个结点，并令p指向其前驱 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        p=p-&amp;gt;next; ++j; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    } 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if(!(p-&amp;gt;next)||j&amp;gt;i-1) return ERROR; //删除位置不合理 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    q=p-&amp;gt;next; //临时保存被删结点的地址以备释放 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    p-&amp;gt;next=q-&amp;gt;next; 	//改变删除结点前驱结点的指针域 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    e=q-&amp;gt;data; 	//保存删除结点的数据域 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    delete q; 	//释放删除结点的空间 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; return OK; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}//ListDelete_L 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;链表的特点&#34;&gt;链表的特点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;结点在存储器中的位置是任意的，即逻辑上相邻的数据元素在物理上不一定相邻&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问时只能通过头指针进入链表，并通过每个结点的指针域向后扫描其余结点，所以寻找第一个结点和最后一个结点所花费的时间不等&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;这种存取元素的方法被称为顺序存取法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据元素的个数可以自由扩充&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入、删除等操作不必移动数据，只需修改链接指针，修改效率较高&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;存储密度小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存取效率不高，必须采用顺序存取，即存取数据元素时，只能按链表的顺序进行访问（顺藤摸瓜）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;链表的时间空间复杂度&#34;&gt;链表的时间，空间复杂度&lt;/h4&gt;
&lt;p&gt;查找:  因线性链表只能顺序存取，即在查找时要从头指针找起，查找的时间复杂度为 O(n)。&lt;/p&gt;
&lt;p&gt;插入和删除:  因线性链表不需要移动元素，只要修改指针，一般情况下时间复杂度为 O(1)。&lt;/p&gt;
&lt;p&gt;如果要在单链表中进行前插或删除操作，由于要从头查找前驱结点，所耗时间复杂度为O(n) 。&lt;/p&gt;
&lt;h3 id=&#34;单链表的建立&#34;&gt;*单链表的建立&lt;/h3&gt;
&lt;p&gt;方法一：前插法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/5468c60ceed105bb45e959beed925dc.png&#34;
	width=&#34;710&#34;
	height=&#34;535&#34;
	srcset=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/5468c60ceed105bb45e959beed925dc_huaac79d02bb35966017232625ebf4c859_33596_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/5468c60ceed105bb45e959beed925dc_huaac79d02bb35966017232625ebf4c859_33596_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;318px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void CreateList_F(LinkList &amp;amp;L,int n){ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     L=new LNode; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      L-&amp;gt;next=NULL;     //先建立一个带头结点的单链表 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      for(i=n;i&amp;gt;0;--i){ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        p=new LNode;    //生成新结点 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        cin&amp;gt;&amp;gt;p-&amp;gt;data;   //输入元素值 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        p-&amp;gt;next=L-&amp;gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        L-&amp;gt;next=p; 	   //插入到表头 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     } 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}//CreateList_F 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;方法二：后插法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void CreateList_L(LinkList &amp;amp;L,int n){   //正位序输入n个元素的值，建立带表头结点的单链表L 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      L=new LNode; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      L-&amp;gt;next=NULL; 	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      r=L; 	                        //尾指针r指向头结点 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      for(i=0;i&amp;lt;n;++i){ 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        p=new LNode;	　	        //生成新结点 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        cin&amp;gt;&amp;gt;p-&amp;gt;data;   	        //输入元素值 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        p-&amp;gt;next=NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        r-&amp;gt;next=p; 	    	        //插入到表尾 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        r=p; 	                        //r指向新的尾结点 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      } 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}//CreateList_L 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;双向链表和循环链表的共性特点&#34;&gt;*双向链表和循环链表的共性特点&lt;/h3&gt;
&lt;p&gt;循环链表和双向链表是两种常见的链式存储结构，它们的共性如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;都是链式存储：链式存储是指线性数据结构的一种存储方式，在这种方式中，数据不是顺次存储在内存单元中，而是通过一个指针将相邻的数据连接在一起。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;都可以实现动态的数据存储：链式存储的线性结构可以随着数据的添加和删除动态变化，避免因为数据量固定导致的内存浪费。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;都是非连续存储：链式存储的数据不是顺次存储在内存单元中，而是分散存储在各个不同的内存单元中，因此是非连续的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;循环链表的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;循环：循环链表是一种特殊的链式存储结构，其特殊之处在于，最后一个数据元素的指针指向链表的第一个元素，实现了循环结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方便遍历：由于循环链表结构中的数据元素是相互连接的，因此，可以方便地从一个数据元素遍历到另一个数据元素。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;双向链表的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;双向链接双向链表是一种特殊的链式存储结构，每个数据元素同时包含了前驱和后继的指针，使得可以从前面和后面同时遍历链表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方便插入和删除：由于双向链表中每个数据元素都包含了前驱和后继的指针，因此，可以方便地在链表的任意位置插入和删除数据元素。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;顺序表和链表的比较&#34;&gt;顺序表和链表的比较&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/a5bca11db7a0ffe88cf2437c1d390d0.png&#34;
	width=&#34;714&#34;
	height=&#34;535&#34;
	srcset=&#34;https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/a5bca11db7a0ffe88cf2437c1d390d0_huc51b11635fc4e22eb1b6a7b3227c1c9b_48836_480x0_resize_box_3.png 480w, https://sryasuka.fun/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/a5bca11db7a0ffe88cf2437c1d390d0_huc51b11635fc4e22eb1b6a7b3227c1c9b_48836_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Chinese Test</title>
        <link>https://sryasuka.fun/p/test-chinese/</link>
        <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://sryasuka.fun/p/test-chinese/</guid>
        <description>&lt;img src="https://sryasuka.fun/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash.jpg" alt="Featured image of post Chinese Test" /&gt;&lt;h2 id=&#34;正文测试&#34;&gt;正文测试&lt;/h2&gt;
&lt;p&gt;而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。&lt;/p&gt;
&lt;p&gt;奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。&lt;/p&gt;
&lt;h2 id=&#34;引用&#34;&gt;引用&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;思念是最暖的忧伤像一双翅膀&lt;br&gt;
让我停不了飞不远在过往游荡&lt;br&gt;
不告而别的你 就算为了我着想&lt;br&gt;
这么沉痛的呵护 我怎么能翱翔&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=3aypp_YlBzI&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;最暖的憂傷 - 田馥甄&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;图片&#34;&gt;图片&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/test-chinese/florian-klauer-nptLmg6jqDo-unsplash.jpg&#34;
	width=&#34;667&#34;
	height=&#34;1000&#34;
	srcset=&#34;https://sryasuka.fun/p/test-chinese/florian-klauer-nptLmg6jqDo-unsplash_hu595aaf3b3dbbb41af5aed8d3958cc9f9_13854_480x0_resize_q75_box.jpg 480w, https://sryasuka.fun/p/test-chinese/florian-klauer-nptLmg6jqDo-unsplash_hu595aaf3b3dbbb41af5aed8d3958cc9f9_13854_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Photo by Florian Klauer on Unsplash&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;160px&#34;
	
&gt;  &lt;img src=&#34;https://sryasuka.fun/p/test-chinese/luca-bravo-alS7ewQ41M8-unsplash.jpg&#34;
	width=&#34;1000&#34;
	height=&#34;667&#34;
	srcset=&#34;https://sryasuka.fun/p/test-chinese/luca-bravo-alS7ewQ41M8-unsplash_hu0a3f1163de68d0b9471979ebf0ecf11e_32400_480x0_resize_q75_box.jpg 480w, https://sryasuka.fun/p/test-chinese/luca-bravo-alS7ewQ41M8-unsplash_hu0a3f1163de68d0b9471979ebf0ecf11e_32400_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Photo by Luca Bravo on Unsplash&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sryasuka.fun/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash.jpg&#34;
	width=&#34;1000&#34;
	height=&#34;750&#34;
	srcset=&#34;https://sryasuka.fun/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_480x0_resize_q75_box.jpg 480w, https://sryasuka.fun/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Photo by Helena Hertz on Unsplash&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;  &lt;img src=&#34;https://sryasuka.fun/p/test-chinese/hudai-gayiran-3Od_VKcDEAA-unsplash.jpg&#34;
	width=&#34;667&#34;
	height=&#34;1000&#34;
	srcset=&#34;https://sryasuka.fun/p/test-chinese/hudai-gayiran-3Od_VKcDEAA-unsplash_hub241c2a9c7a2caf7e16a2a5bbc7141ff_18711_480x0_resize_q75_box.jpg 480w, https://sryasuka.fun/p/test-chinese/hudai-gayiran-3Od_VKcDEAA-unsplash_hub241c2a9c7a2caf7e16a2a5bbc7141ff_18711_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Photo by Hudai Gayiran on Unsplash&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;160px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;![&lt;span class=&#34;nt&#34;&gt;Photo by Florian Klauer on Unsplash&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;florian-klauer-nptLmg6jqDo-unsplash.jpg&lt;/span&gt;)  ![&lt;span class=&#34;nt&#34;&gt;Photo by Luca Bravo on Unsplash&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;luca-bravo-alS7ewQ41M8-unsplash.jpg&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;![&lt;span class=&#34;nt&#34;&gt;Photo by Helena Hertz on Unsplash&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;helena-hertz-wWZzXlDpMog-unsplash.jpg&lt;/span&gt;)  ![&lt;span class=&#34;nt&#34;&gt;Photo by Hudai Gayiran on Unsplash&lt;/span&gt;](&lt;span class=&#34;na&#34;&gt;hudai-gayiran-3Od_VKcDEAA-unsplash.jpg&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;相册语法来自 &lt;a class=&#34;link&#34; href=&#34;https://typlog.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Typlog&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
